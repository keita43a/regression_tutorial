[["index.html", "武蔵大生のためのRによる実証分析入門 Chapter 1 この資料について", " 武蔵大生のためのRによる実証分析入門 Keita Abe 2024-05-08 Chapter 1 この資料について この武蔵大学経済学部でのRを用いた実証分析入門の資料です。 武蔵大学経済学部の学生の状況を背景に、最低限でなんとか実証分析を行うところまで学ぶことを意図した資料になっています。 Rの入門については、より詳しい以下の資料やウェブサイトが存在しますので、詳しい説明が知りたい学生はそちらを参照することをおすすめします。 わたしたちのR R言語入門 実証分析のベースとなる計量経済学についてはこれらの書籍がおすすめです。 計量経済学の第一歩 実証分析のススメ また、Rによる実証分析についても多くの書籍が出版されています。そちらも参照してください。 Rによるデータ分析入門 Rによる実証分析 第2版 Rによる計量政治学 "],["whatsr.html", "Chapter 2 Rとはなにか？ 2.1 R? 2.2 Excelじゃだめなのか 2.3 Rのよいところ 2.4 例えばRでできること：図表 2.5 例えばRでできること：ウェブアプリ 2.6 例えばRでできること：ウェブスクレイピング 2.7 地図の分析・活用 2.8 Rの欠点 2.9 CUIとGUI 2.10 プログラミング", " Chapter 2 Rとはなにか？ 2.1 R?  R は統計、データ分析、作図のためのインタープリタープログラミング言語 統計やデータ分析を行うアプリ 他にはSPSS, Stata Pythonもよく使われる 2.2 Excelじゃだめなのか Excel は表計算ソフトで多くの機能を有している Excelでできること 計算する 図を描く 基本的な統計分析 ではExcelではだめなのか？ Excelでも最低限のことはできますが、分析が複雑になっていくと手数も増えていきます。 特に、Excelだと同じことをもう一度やる（データを変えて同じ分析をする、など）がやりにくく、ミスも起きやすくなります。 本当に初歩の初歩ならエクセルで十分ですが、ある程度の実証分析をやろうと思うとRなどを学ぶほうが回り道のようで結局早い 2.3 Rのよいところ 無料 多くにプラットフォーム（MacOS, Windows, Linux)で使用可能 たくさんの資料がネット上に存在する 分析結果をプレゼンテーションするツールが充実している Rstudio: 統合開発環境(IDE) 豊富なパッケージ 多くのエンジニアや研究者が公開 2.4 例えばRでできること：図表 Rでは、柔軟に図表を描くことができます。例えば以下の図は、武蔵大学のウェブサイトに公開されている学生数のデータを描画したものです。少しやり方を学べば、以下のような図を簡単に作成することができます。 2.5 例えばRでできること：ウェブアプリ Rではインタラクティブなウェブアプリも作ることができます。以下の例は、数値をユーザーが変えることで結果のグラフが変化して表示される簡単なウェブアプリです。 例 2.6 例えばRでできること：ウェブスクレイピング 2.7 地図の分析・活用 2.8 Rの欠点 Rは進化が速い 処理が比較的遅い 一般的なデータ分析をするのには問題がない Excelよりは速い ビッグデータや複雑な統計モデルを走らせると、遅かったりメモリ消費が激しい CUIなので、最初の学習が難しい 2.9 CUIとGUI CUI: Character User Interface 命令を文字で行う（キーボードを使う）操作環境 GUI: Graphic User Interface マウスでクリックしながら使う操作環境 2.9.1 GUIの方が楽？ GUIの方が楽では？ マウスで操作ができる方がよさそう？ CUIは記録ができる 何度も同じ操作ができる 人が書いた一連の操作（コード）をコピー・参考にできる 柔軟性が高い Rを使う統合環境であるRStudioは、CUIながらGUI的に作業を行える部分もある環境を提供する。 2.10 プログラミング やることはプログラミング PythonもJavaも、まずはプログラミングを理解すると学べるようになる Rは比較的わかりやすい言語 ゼミでは基本的なデータ描画と統計分析をできるようになることが目標 "],["howtostart.html", "Chapter 3 Rのはじめかた 3.1 Rをどうやって使う？ 3.2 Rstudioを使う3つの方法 3.3 Rのインストール 3.4 Rstudioのインストール 3.5 Rstudioのインターフェース 3.6 コンピュータのディレクトリ構造 3.7 演習：作業フォルダを作ろう 3.8 作業スペース 3.9 プロジェクトの作成 3.10 演習: Rプロジェクトを作成してみよう 3.11 とりあえず触ってみる 3.12 スクリプトの作成 3.13 実行してみる 3.14 スクリプトを書く際の注意点 3.15 エラーを恐れるな！ 3.16 Rstudioの補完機能 3.17 Rstudioのオプション", " Chapter 3 Rのはじめかた 3.1 Rをどうやって使う？ Rを使うにはいくつか方法がある。 統合開発環境 IDE: Integrated Development Environment ソフトウェア開発や、データ分析のプロセスをワンストップで行える環境 一部GUIを導入したり、CUIによる操作をアシストする 特に強い好みがない限り、Rstudioをおすすめ R 単体でも使えるが、RstudioでRを使うほうが直感的で使いやすい。 3.2 Rstudioを使う3つの方法 PCにインストール 自分のPCにインストール ネット環境がなくても使える 自分のPCにファイルにアクセスして使える 学校のパソコンを使う 学校のパソコンにはRとRStudioがインストールされている 学校に自分のPCを持ってこなくてもよいが家で勉強できない Rプロジェクトを用いた際にネットワークドライブに置いた場合、ワーキングディレクトリの挙動がおかしいので、パソコンのpathなどに詳しくない人は混乱するかもしれない。 posit.Cloudの無料プランを使う クラウド上でRstudioを使う 利点：コンピューター上の設定が不要 欠点：データファイルなどを毎回アップロードする必要がある。ファイル数などは限られる。 できれば1の方法でやってみよう。 3.3 Rのインストール 学校のパソコンにはすでにインストールされている 自分のパソコンに導入する人はこのスライドかここにある「RとRStudioのインストール方法の解説」を参照 3.3.1 Windownsへのインストール ブラウザからCLANへアクセスする もし繋がらなければこちらから試してみる 「Download R for Windows」-&gt; 「base」-&gt; 「Download R-4.3.3 for Windows」 R-4.3.3-win.exeがダウンロードされる この資料が更新されていなければ4.3.3.より新しいバージョンになっているかもしれない。 Figure 3.1: Rのダウンロード。Windowsの場合 Figure 3.2: Rのダウンロード。Windowsの場合 Figure 3.3: Rのダウンロード。Windowsの場合 R-4.3.3-win.exeをクリックしてインストールする 基本的に「はい」や「次へ」で良い 「起動時オプション」は「いいえ」（デフォルト状態） 「このアプリがデバイスに変更を加えることを許可しますか」と出たら「はい」 完了したらデスクトップやアプリ一覧にR.4.3.3があるかどうかチェック 3.3.2 Mac OSへのインストール Mac OSへのインストールは少し大変である。一つずつ確認していこう。 3.3.2.1 チップの種類を確認 まず自分のMacがIntelチップかApple Siliconかを確認する 左上のリンゴマーク→「このMacについて」 表示された情報の「チップ」が「Apple M1」やM2,M3であればApple silicon, IntelであればIntel 3.3.2.2 Command Line Toolsのインストール Macのアプリ一覧から、「ターミナル」を開く。 Figure 3.4: ターミナル ターミナルを開くと以下のような画面が出てくる。以下の画面は私のPCなのでkeitaになっているが、実際にはそれぞれのユーザーネームになっている。 Figure 3.5: ターミナルの画面 ターミナルで自分のユーザー名の隣の$マークの後ろに以下のように入力する。 $ xcode-select --install もし$マークがなくて、%になっていたら、%のあとにxcodeから始めて入力する。 % xcode-select --install あとは指示に従う。 もしerror: command line tools are already installed, use \"Software Update\" to install updatesというメッセージが出たらCommand Line Toolsはすでにインストールされている。 もしこれで、うまくいかない場合は次のXcodeをインストールすることでCommand Line Toolsをインストールする。 3.3.2.3 Xcodeのインストール Xcodeは上のCommand Line Toolsがインストールできればとりあえず不要（のはず）である。もしできばければ、インストールしよう。ここではApple IDが必要となる。Xcodeは非常に大きいので、WiFiなどのインターネット接続が安定しているところで、時間のあるときにやりましょう。 MacのApp Storeから、Xcodeをインストールする。 App Storeを開いて、Xcodeを検索する。下のようなハンマーのアイコンのアプリである。これをインストールする。 Figure 3.6: Xcode App Storeの使い方がわからない人は、App Storeユーザーガイドを参照してください。 3.3.2.4 XQuartzのインストール XQuartzのウェブサイトにアクセスして、Quartz-x.x.x.pkgというファイルをダウンロードする。xにはバージョン名が入るので、2024年4月時点では2.8.5だが、それより新しいバージョンになっているかもしれない。 Figure 3.7: XQuartzのダウンロード画面 ダウンロードされたpkgファイルを開いて、インストールする。 3.3.2.5 Rのダウンロード ブラウザからCLANへアクセスする もし繋がらなければこちらから試してみる 「Download R for Mac OS」をクリック Apple Siliconの場合は、R-4.3.3-arm64.pkgをダウンロード Intelの場合は、R-4.3.3-x86_64.pkgをダウンロード Figure 3.8: Rのダウンロード。MacOSの場合 Figure 3.9: Rのダウンロード。MacOSの場合 ダウンロードしたpkgファイルをクリックしてインストールする 基本的には「次へ」「同意する」を押す インストール先：Macintosh HD 標準インストール 完了したら、アプリ一覧にRがあるかどうかチェック Figure 3.10: MacのLaunchpad上に表示されているR 3.4 Rstudioのインストール Posit社のウェブサイトへアクセス “2. Install RStudio”の青いボタンをクリック Figure 3.11: RStudioのダウンロード。図はMacOSの場合 ダウンロードされたファイルをクリックしてインストールする。基本的に「次へ」でよい。 完了したら、アプリ一覧に丸いロゴでRと書いてあるRStudioがあるかチェック。Windowsの場合はデスクトップにショートカットが生成されない可能性があるので、アプリ一覧でチェックしよう。 3.5 Rstudioのインターフェース RStudioは４つのペーンに分割されている。もし３つしかない、という人は左上の白い四角に緑の＋マークが付いているところを押して”R Script”を選ぼう。すると左上のペーンが現れて新たなスクリプトファイルが生成される。 Figure 3.12: Rstudio見た目 3.6 コンピュータのディレクトリ構造 コンピュータでファイルなどを扱う上で、pathという概念を理解しておく必要がある。パソコンを使っているとフォルダをよく使う。自分が作ったファイルをフォルダに保存するなどである。これはCUIではディレクトリと呼ばれる。 コンピュータ上においては、ファイルの場所はpathで表現される。これはコンピュータ上の住所のようなものである。 j:というドライブの下のabezemiというフォルダの下にあるr_renshuというフォルダにあるkadai1.Rというファイルがあるとする。そのファイルのpathはj:/abezemi/r_renshu/kadai1.Rとなる。 コンピュータ上では、このように文字でファイルの場所と名前を指定することがよくある。 Figure 3.13: ディレクトリ構造 3.7 演習：作業フォルダを作ろう (Windows) ドライブ上で右クリック→新規作成→フォルダ (Mac) Finderの右上の◯に…のマークをクリック→新規フォルダ 3.7.1 自分のパソコン 例えば「ドキュメント」(Windows)や「書類」(Mac)の下にabezemiフォルダを作成 3.7.2 学校のパソコン 自分の学生番号のドライブ(例 s1234567)の下に abezemi フォルダを作成 3.7.3 Posit.cloud Posit.clouの場合は、まだここでは何もする必要はない。 3.8 作業スペース コンピューター上では、どこかのディレクトリ（フォルダ）がRの作業場所になっている。 今の作業場所はgetwd()で表示できる。 getwd() これを変更するにはsetwd(path)で変更できる。 # Windowsの場合 # keitaを自分のユーザー名に変える setwd(&quot;C:/keita/Documents/abezemi&quot;) # Mac OSの場合 # keitaを自分のユーザー名に変える setwd(&quot;/Users/keita/Documents/abezemi&quot;) # 学校のPCの場合 setwd(&quot;j:/abezemi&quot;) ここではj:ドライブの下のabezemiフォルダに設定。 もう一度getwd()して変更されたか確認しよう。 3.9 プロジェクトの作成 作業場所を指定しても、ファイルの管理が面倒だったりする。 RStudioのRプロジェクトという機能を使うと、以下のメリットがある データやスクリプト（コード）へのアクセスが容易 Gitによるバージョン管理のベースにもなる 異なる環境でも同じ作業スペースが設定される 一つのプロジェクトについてひとまとまりのファイルとして管理できる 3.10 演習: Rプロジェクトを作成してみよう File -&gt; “New Project” -もしくは右上の “Project (none)” New Directoryでプロジェクトを作成 “New Project”を選択 プロジェクト名を入力: r_renshu プロジェクト名は英語で。 日本語は使えない（もしくはトラブルの元になる） スペースも使わない。アンダーバーやハイフンを代用できる。 2つ目の欄には、どのディレクトリの下にプロジェクトディレクトリを作るかを指定する。 今回はabezemiの下につくるので、Browseを開いて上で作ったabezemiフォルダを指定してOpenをクリック。 Figure 3.14: Rプロジェクトの作成 プロジェクトが作成されると、作成したディレクトリにはプロジェクト名.Rprojという名前のファイルが作成される 今回はabezemiの下にr_renshuフォルダが作成され、r_renshu.Rprojというファイルができる プロジェクトの設定などを保存 3.11 とりあえず触ってみる Rとの”対話”は、Rstudioの左下のペイン(コンソール)で行われる。 コンソールに、1+1と打ってみる。 すると、2と表示される。 1 + 1 ## [1] 2 3.12 スクリプトの作成 そのままConsoleに入力していってもよいが、スクリプト(コード)に書くことで、記録を残しながらRに命令を与えることができる。 3.12.1 演習：スクリプトを作成してみる Rスクリプトを作成する 上のメニューのFile -&gt; New File -&gt; R script もしくは左上の区画のから、「R Script」 “Untitled1”というRスクリプトが作成されるので名前をつけて保存する File -&gt; Save As… -&gt; r_renshu.Rという名前をつけて保存 もしくは右上のフロッピーを押してr_renshu.Rという名前をつけて保存 3.13 実行してみる R scriptに以下のように書く print(&quot;Hello World!&quot;) ## [1] &quot;Hello World!&quot; カーソルが同じ行にあることを確認して、をクリック もしくは、[Ctrl]を押しながら[Enter] (MacならCommand+Enter) “Hello World!”と表示されれば成功。 3.13.1 コードを実行する際のポイント 実行したい範囲を選択してRunを押すと実行されるが、[Ctrl]を押しながら[Enter] (Macなら[Command]+[Enter])でも実行される。 また、範囲を選択しなくてもカーソルがあるところでRunか[Ctrl]+[Enter]を押すと、その行だけ（もしくはコードとして一つの命令になっている行数だけ）実行される。いちいち範囲選択しなくても良いので便利。 3.14 スクリプトを書く際の注意点 3.14.1 コメント R script上では#から始まる行は、コメントとして認識され、実行するとコンソールには表示されるが、何も起こらない。 メモなどを書く際に使う。 # これは初めてのRのコードです。 print(&quot;Hello World&quot;) ## [1] &quot;Hello World&quot; もしくは一度使ったが、今は実行したくないコードを一時的に無効にする。これはコメントアウトというプログラミングにおける基本的なテクニック。 # print(&quot;Good Evening&quot;) 3.14.2 スクリプトは読みやすく コメントや改行を活用して読みやすいコード（スクリプト）を書く。 Rのコードでは空行は意味をなさないのでいくらでも空けてよい。 良い例 # Rの練習１ # 2024年4月15日 # ライブラリ library(tidyverse) # コード本体 # はじめまして print(&quot;Hello World!&quot;) # 足し算 x &lt;- 1 + 1 # データを読み込む # このデータはXXでダウンロードした data &lt;- read_csv(&quot;data/data1.csv&quot;) 良くない例 library(tidyverse) print(&quot;Hello World!&quot;) x &lt;- 1 + 1 data &lt;- read_csv(&quot;data/data1.csv&quot;) 3.15 エラーを恐れるな！ 間違ったコマンドを入力すると赤字でエラーが出る。 怖がらなくてよい。間違ってると教えてくれてるだけ。 .(ドット)と,(コンマ)を間違えただけでもうまくいかないのがプログラミング。注意深く書こう。 # これは間違ったコード(tを忘れてる) prin(&quot;Hello World&quot;) ## Error in prin(&quot;Hello World&quot;): could not find function &quot;prin&quot; 3.15.1 よくあるエラー1 Error in read_csv(\"data/Countries.csv\") : could not find function \"read_csv\" XXXという関数が見つかりません、というエラー 考えられるケース library()で必要なパッケージを読み込めてない 関数のつづりが間違っている 3.15.2 よくあるエラー2 Error: 'data/Countris.csv' does not exist in current working directory XXX.csvというファイルが作業場所にありません。 考えられるケース - そもそもファイルがない（保存した場所を間違えた） - ファイルの指定場所が間違っている - つづりが間違っている 3.16 Rstudioの補完機能 オブジェクト内の要素や、ファイル名などを補完してくれる機能 3.17 Rstudioのオプション Rstudioを自分好みにカスタマイズすることが可能 [Tools]-&gt;[Global Options…] Rstudio全般 コーディング 外観 ターミナル キーボードショートカット 3.17.1 例：外観の変更 "],["letsuse.html", "Chapter 4 Rを使ってみる 4.1 計算機としてのR 4.2 プログラミング言語としてのR 4.3 データ型 4.4 ベクトル 4.5 リスト", " Chapter 4 Rを使ってみる 4.1 計算機としてのR 4.1.1 演習：R Scriptの作成 r_renshuプロジェクトを開く。 新たにr_trial.Rという名前のRスクリプトを作成しよう。 スクリプトの作り方を忘れた人はセクション3.12を参照。 以下の演算をそのスクリプトに書いて実行してみよう。 4.1.2 足し算・引き算 1 + 1 ## [1] 2 400 - 50 ## [1] 350 4.1.3 かけ算・割り算 掛け算はアスタリスク(*)を使う。 2 * 3 ## [1] 6 割り算はスラッシュ(/)を使う (2+7)/3 ## [1] 3 割り切れない場合はある程度まで桁が表示 10/3 ## [1] 3.333333 4.1.4 練習問題：以下の演算をRを使ってやってみよう \\(9179\\div67\\) \\((256\\times 43 + 54)\\div 8\\) \\(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12\\) 4.1.5 論理演算 論理演算は書いてあることが真か偽か？を評価する。 # 「10は5より大きい」という命題は正しい？ 10 &gt; 5 ## [1] TRUE # 「3は5より大きい」という命題は正しい？ 3 &gt; 5 ## [1] FALSE # 「等しい」は=が2つ。１つだと「代入」という意味になってしまう。 &quot;musashi&quot; == &quot;musashi&quot; ## [1] TRUE &quot;musashi&quot; == &quot;634&quot; ## [1] FALSE # musashiと634は等しくない、という命題 &quot;musashi&quot; != &quot;634&quot; ## [1] TRUE OR 演算 # 2つの論理演算のいずれかがTRUEならTRUE (5 == 5) | (3 == 3) ## [1] TRUE (5 == 5) | (&quot;musashi&quot; == &quot;634&quot;) ## [1] TRUE AND 演算 # 複数の論理演算の全てがTRUEならTRUE (5 == 5) &amp; (3 == 3) ## [1] TRUE (5 == 5) &amp; (&quot;musashi&quot; == &quot;634&quot;) ## [1] FALSE 4.2 プログラミング言語としてのR 4.2.1 変数へのオブジェクトの代入 x や yという「入れ物」に数字を代入する。 x &lt;- 8 y &lt;- 3 z &lt;- x + y z ## [1] 11 オブジェクトは「上書き」できることに注意。 以下の例では、xに3を代入した後x+1という演算をまた、xに代入している。 それによって、xは4となる。 x &lt;- 3 x &lt;- x + 1 x ## [1] 4 4.2.2 プログラミング：繰り返し 同じような作業を繰り返させる。 以下のケースでは、\\(i\\)というオブジェクトに1から10までを順番に入れて、それぞれのターンにおいて\\(i+1\\)という数字をprint()という関数でコンソールに表示させている。つまり、同じ作業を10回中身を変えてやりたいときに、print(1+1), print(2+1)...というように、何度も同じ文を書く必要がない。 for(i in 1:10){ print(i+1) } ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 ## [1] 11 4.2.3 練習問題：ループを用いた計算 1から50までを合計する繰り返し文を書いてみよう。 \\(1+2+3+\\cdots+50=\\) ヒント：goukeiというオブジェクトを用意してみよう。 4.2.4 プログラミング：if文 もしある命題が真ならどうする、偽ならどうするというifの条件によって異なる処理を行うif文もプログラミングの基本だ。Rでも簡単に実装できる。 x &lt;- 5 # もしxが0より大きいなら、yに3+xを代入するという処理を実行する。 if(x &gt; 0){ y = 3 + x } print(y) ## [1] 8 x &lt;- -4 # もしxが0より大きいなら、wに3+xを代入するという処理を実行する。 if(x &gt; 0){ w = 3 + x } # 上の処理は実行されていないのでwは定義されず、&quot;not found&quot;というエラーが出る。 print(w) ## Error in eval(expr, envir, enclos): object &#39;w&#39; not found もし命題が偽だった場合の処理も指定できる。 x &lt;- -5 # もしxが0より大きければ3を足してvに代入、 # そうでなければ3を引いてvに代入。 if(x &gt; 0){ v = x + 3 }else{ v = x - 3 } print(v) ## [1] -8 4.3 データ型 Rのオブジェクトにはいくつかの「型」がある。そのオブジェクトに格納されている要素がどういう性質を持つか？が定義される。これを、データ型と呼ぶ。 たとえば、数字なのか文字列なのか？で扱いが異なる。 # 実数 x &lt;- 634 mode(x) ## [1] &quot;numeric&quot; # 文字列 y &lt;- &quot;musashi&quot; mode(y) ## [1] &quot;character&quot; 4.3.1 データ型：注意点 我々の目には同じ634であっても、データ型が文字列として定義されていると、コンピューターは計算ができない。ただ6.3.4.と書かれている文字であって、数字ではないという認識がなされるからである。 # 数字だが文字列 z &lt;- &quot;634&quot; mode(z) ## [1] &quot;character&quot; z + 6 ## Error in z + 6: non-numeric argument to binary operator 4.3.2 データ型の変換 # データ型のチェック mode(z) ## [1] &quot;character&quot; # 実数かどうか？ is.numeric(z) ## [1] FALSE # データ型を実数に変換して再度zに代入 z &lt;- as.numeric(z) # 再度チェック is.numeric(z) ## [1] TRUE 4.4 ベクトル 順序のある要素の集まりをベクトルと呼ぶ。 c()関数で作成することができる。 v1 &lt;- c(1,2,3,4,5) print(v1) ## [1] 1 2 3 4 5 ベクトルは、文字や論理値など取ることができる。 v2 &lt;- c(&quot;musashi&quot;,&quot;nerima&quot;,&quot;ekoda&quot;) print(v2) ## [1] &quot;musashi&quot; &quot;nerima&quot; &quot;ekoda&quot; v3 &lt;- c(FALSE,TRUE,TRUE,FALSE) print(v3) ## [1] FALSE TRUE TRUE FALSE 4.4.1 ベクトルの型 異なるデータ型を同じベクトルに混ぜることはできない。 混ぜると、一定のルールに基づいてある型が他の型より優先される # 数値と論理値を混ぜると、数値になる。(FALSE-&gt;0, TRUE-&gt;1) v4 &lt;- c(FALSE,1,TRUE) print(v4) ## [1] 0 1 1 # 数値と論理値と文字列を混ぜると、全部文字列になる v5 &lt;- c(FALSE,1,&quot;musashi&quot;) print(v5) ## [1] &quot;FALSE&quot; &quot;1&quot; &quot;musashi&quot; 4.4.2 ベクトル：連続した数値 連続した数値を入力したい場合はコロン:を使う v6 &lt;- c(1:10) print(v6) ## [1] 1 2 3 4 5 6 7 8 9 10 nずつ増える数列を作りたい場合は、seq()関数を使う # 例：2から50まで２ずつ増える数列 v7 &lt;- seq(2,50,by=2) 4.4.3 練習問題: 数列の作成 3から60まで3ずつ増える数列ベクトルを作りなさい 4.4.4 ベクトル：同じ数値が並ぶベクトル 同じ数値がたくさんあるベクトルを作りたい場合はrep()関数を使う # 5が100個ならぶベクトル v8 &lt;- rep(5,100) print(v8) ## [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [34] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [67] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [100] 5 本当に100個出てるか？ ベクトルの要素の数を数える関数はlength length(v8) ## [1] 100 4.4.5 練習問題：ベクトルの作成 seq()関数とrep()関数を使って、2,4,6,8,10が5回連続するベクトルをつくってみよう。 結果をv9_exというオブジェクトに格納して、コンソールに結果を表示しよう。 4.4.6 ベクトル要素の参照 ベクトルのn個目の要素を参照したいときは角カッコを使う[] # v7の3つ目の要素は6 v7[3] ## [1] 6 # v7の2,3,5つ目の要素 v7[c(2,3,5)] ## [1] 4 6 10 4.5 リスト 様々なベクトルやデータなどのオブジェクトをひとまとめにして扱うことができるのがリスト リストはlist()関数で作成する # aというオブジェクトに、文字列ベクトル、数値ベクトル、データが混ざって入っている。 # カンマ, の後に改行しているが、listのかっこが閉じるまではひとまとまりだと扱われる。 a &lt;- list( c(&quot;a&quot;, &quot;b&quot;, NA, &quot;d&quot;), num = c(3, 1.1, 5), data = head(mtcars, 1)) a ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; NA &quot;d&quot; ## ## $num ## [1] 3.0 1.1 5.0 ## ## $data ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 4.5.1 リストの参照 リストの参照も角カッコでできる # リストの参照 a[1] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; NA &quot;d&quot; a[2] ## $num ## [1] 3.0 1.1 5.0 4.5.2 リストの参照 リストの中身のみを取り出したい場合は、二重括角カッコを使う[[]] a[[3]] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 "],["packages.html", "Chapter 5 パッケージとは 5.1 パッケージについて 5.2 パッケージのインストール 5.3 よく使うパッケージのインストール 5.4 パッケージの使い方1 5.5 パッケージの使い方2 5.6 パッケージの注意点", " Chapter 5 パッケージとは 5.1 パッケージについて Rはデフォルト(初期状態)でインストールされている関数がたくさんある。 ベクトルの長さを測るlength()や、散布図を描くplot()などは関数であり、もともとRをインストールした時点で入っている。 しかし、さらにRを拡張して機能を強化することができる。 それがパッケージのインストールである。 たとえばスマホにはもともと基本アプリが入っているが、さらにいろんなアプリをダウンロードしてインストールできることに似ている。 しかしパッケージは無料である。 5.2 パッケージのインストール パッケージのインストールをする方法は二つある。 install.packages()関数を使う方法 install.packages(&quot;ggplot2&quot;) Rstudioの右下の区画の[Packages]タブから、[Install]ボタンを押して、ダイアログに従ってインストール 5.3 よく使うパッケージのインストール tidyverseと呼ばれるパッケージをインストールしてみよう。 install.packages(&quot;tidyverse&quot;) 実はこのtidyverseはパッケージ群であり、複数のパッケージがインストールされる。 5.3.1 Tidyverseについて Tidyverseというパッケージ群はggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats, lubridateという複数のパッケージを含む たとえばggplot2は図を描くためのパッケージであり、plot()関数などとかぶる。実際に、ggplot2ではplot()と同じような図を出力することができる。Tidyverseシリーズは、データをより直感的に扱うための哲学に基づいて開発されており、Rオリジナルの関数ではないが、多くの人が使うパッケージ群となっておりRを学ぶならばほぼ必須といえる状態になりつつある。 5.4 パッケージの使い方1 パッケージの使い方は２通りある。 パッケージに入っている関数を使うためには、パッケージを読み込む ## library()でパッケージの読み込み library(tidyverse) 読み込んだ後は、パッケージに含まれている関数が普通に使える。 ## read_csvはtidyverseに入っているreadrというパッケージに含まれる data1 &lt;- read_csv(&quot;data/data1.csv&quot;) 一般的には、コード（Rスクリプト）を書く際に、コードの冒頭でパッケージを読みこんで置くことが一般的である。 # コードの例 # ライブラリ library(tidyverse) # データの読み込み data_634 &lt;- read_csv(&quot;data/hogehoge.csv&quot;) # データのサマリー summary(data_634) 5.5 パッケージの使い方2 読み込んでいないパッケージの関数を使おうとするとエラーが出る。 ## read_csvはtidyverseに入っているreadrというパッケージに含まれる data1 &lt;- read_csv(&quot;data/data1.csv&quot;) ## Error in read_csv(&quot;data/data1.csv&quot;): could not find function &quot;read_csv&quot; パッケージ名と関数名を::で繋ぐと、読み込んでいなくても使える。 data1 &lt;- readr::read_csv(&quot;data/data1.csv&quot;) これが２つ目のパッケージの使い方である。 そのスクリプトであまり使わないが一回だけ使いたいケースや、一般的でないパッケージや関数なので何のパッケージに入っている関数なのかを明示したい際に使う。 5.6 パッケージの注意点 パッケージは一旦インストールすると、Rには入っているが、使う際にはlibraryで読み込むか、2の方法で呼び出す必要がある。 Rのバージョンを更新（新しいRをインストール）すると、過去にダウンロードしたパッケージをインストールし直す必要があるので、もしRを更新した場合は注意しよう。 "],["datahandling.html", "Chapter 6 データのハンドリング 6.1 データ 6.2 データの読み込み 6.3 tidy data (整然データ) 6.4 データフレームを扱うテクニック：パイプ 6.5 tidyでないデータとtidyデータの変換 6.6 データの「大きさ」 6.7 列の名前一覧 6.8 変数の要約 6.9 変数の取り出し 6.10 変数の取り出しと計算 6.11 データフレームとtibble 6.12 データの操作 6.13 練習問題: データ操作 6.14 データの結合", " Chapter 6 データのハンドリング 6.1 データ Rはデータ分析（統計解析）を行うのが主な機能 それ以外も色々できるが… 6.1.1 データとは？ 構造化データと非構造化データ 構造化：定義済みの形式に整理されている（行列で定義できる） 非構造化：形式化が難しい（テキストデータ、音声データなど） 半構造化データ：ある程度の構造は持つが、データベースのような形式になっていないもの（例：xml, json) Rでは基本的に構造化データを扱う テキストデータなども扱えるが、授業では扱わない 6.1.2 データフレーム Rでは基本的にデータをデータフレームという形で扱う データフレームは行と列を持つ形式 6.1.3 行と列 行と列は方向が決まっている。横が行(row)、縦が列(column)である。 行と列の覚え方 6.1.4 きれいなデータ？ 人間の見やすいデータ形式(表)とコンピュータが処理しやすいデータ形式は異なる。 同じ情報をもつデータフレームであっても、形式が異なるものがあることを理解しよう。 冒頭で出た武蔵大学経済学部の学生数のデータを見てみよう。 6.2 データの読み込み データはデータファイルから読み込む ファイルがある場所のpathを指定する。 データファイルの形式はExcelや.csv, .dta, .rdsなど様々 形式によって使う関数が異なる。 例えば Excelなら、readxlパッケージのread_excel csvなら、readrパッケージのread_csv いずれもtidyverseパッケージ群に含まれている ここではエクセル形式について説明するが、その他のファイル形式については私達のRの第8章を参照してほしい 6.2.1 演習: データの読み込み csvを読み込むにはread_excel()関数を使う。この関数はreadxlパッケージ含まれている。 readxlパッケージをインストールする。 武蔵大学経済学部の学生数データをこちらからダウンロードする。 r_renshuフォルダにdataフォルダを作成し、そこにmusashi_keizai_students_2023.xlsxファイルを保存する。 Rスクリプトを作成し、data_mgt.Rという名前をつけて保存する。 Rスクリプトの冒頭でパッケージを読み込む library(tidyverse) library(readxl) Rスクリプトに以下のコードを書きこみ、データを読み込む。 data_634 &lt;- read_excel(&quot;data/musashi_keizai_students_2023.xlsx&quot;) Error: path does not exist:’というエラーが出る場合は、ファイルの相対パスが間違っている可能性がある r_renshuプロジェクトを開いていることを確認する getwd()で自分がr_renshuフォルダにいることを確認する musashi_keizai_students_2023.xlsxがきちんとdataフォルダに入っていることを確認する 6.2.2 日本語のデータを読み込む際の注意点 日本語のファイルを読み込む時に、問題になる可能性があるのがエンコーディングである。 エンコーディングとは、データを一定の規則に従って目的の情報に変換することで、とくに文字を扱う上で、それぞれの文字に番号を割り当てる符号化を行っている。 最近ではよりグローバルなUnicodeが使われており、tidyverseのパッケージもunicodeあるUTF-8をデフォルトとして使用する。しかし、日本語のファイルの中にはShift-JISというエンコーディングで作成されているファイルもある。 例えば、こちらのファイルをそのまま読み込んで見る。 product_cp932 = read_csv(&quot;data/Products_cp932.csv&quot;) product_cp932 ## # A tibble: 6 × 6 ## ...1 ProductID ProductName Price Category CreatedDate ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; ## 1 1 1 YKDJw 1122 &quot;\\x83w\\x83\\x8b\\x83X&amp;\\x8… 2005-08-30 ## 2 2 2 ftKQ7 1877 &quot;\\x83w\\x83\\x8b\\x83X&amp;\\x8… 2006-07-01 ## 3 3 3 l8lqm 3754 &quot;\\x89\\xc6\\x8b\\xef\\x81E\\… 2005-05-26 ## 4 4 4 8ntvc 8242 &quot;\\x89\\xd4\\x81E\\x83O\\x83… 2005-09-06 ## 5 5 5 HhDBS 4461 &quot;\\x90H\\x95i&quot; 2010-12-28 ## 6 6 6 PKIs3 4963 &quot;\\x8eG\\x89\\xdd\\x81E\\x93… 2005-02-09 Categoryという変数が文字化けしてしまっているのがわかる。 ファイルのエンコーディングを調べることができる。 readrパッケージもに入っているguess_encodingを使うと、Shift-JISである可能性が高いことがわかる。 guess_encoding(&quot;data/Products_cp932.csv&quot;) ## # A tibble: 3 × 2 ## encoding confidence ## &lt;chr&gt; &lt;dbl&gt; ## 1 Shift_JIS 1 ## 2 windows-1252 0.31 ## 3 windows-1250 0.31 read_csvのオプションを使って、encodingを指定する。Shift-JISはCP932というエンコーディングになっている。 product_enc = read_csv(&quot;data/Products_cp932.csv&quot;, locale=locale(encoding=&quot;CP932&quot;)) product_enc ## # A tibble: 6 × 6 ## ...1 ProductID ProductName Price Category CreatedDate ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; ## 1 1 1 YKDJw 1122 ヘルス&amp;ビューティー 2005-08-30 ## 2 2 2 ftKQ7 1877 ヘルス&amp;ビューティー 2006-07-01 ## 3 3 3 l8lqm 3754 家具・インテリア・家電 2005-05-26 ## 4 4 4 8ntvc 8242 花・グリーン 2005-09-06 ## 5 5 5 HhDBS 4461 食品 2010-12-28 ## 6 6 6 PKIs3 4963 雑貨・日用品 2005-02-09 文字化けなく読み込めた。 6.2.3 readrのその他のオプション readrでは以下のオプションを引数に指定することで設定できる。 引数 デフォルトの値 意味 col_names TRUE 1行目を列名にするか na c(““,”NA”) 欠損値を表す文字列 comment “” コメント開始文字 skip 0 先頭何行を無視するか n_max Inf 何行目までを読み込むか trim_ws TRUE 前後の空白文字を無視するか 6.3 tidy data (整然データ) 武蔵大学経済学部の学生数データを見てみよう。 学科 性別 4年 3年 2年 1年 経済学科 男 140 121 139 133 経済学科 女 38 46 50 38 経営学科 男 117 111 121 129 経営学科 女 52 62 53 62 金融学科 男 108 107 90 93 金融学科 女 24 33 29 36 ## エクセルからデータを読み込み data_634 &lt;- read_excel(&quot;data/musashi_keizai_students_2023.xlsx&quot;) knitr::kable(data_634) ## kableは見やすい表を出力する関数 このデータは、人間の目に見やすい形式になっている。学科・性別と学年がクロス表形式になっているため、何年生の何学科の男女が何人いるか見やすい表になっている。このような形のデータは横型(wide型)と呼ばれる。 同じデータを、異なる形式で表示したものが以下である。 print(as.data.frame(data_634_long)) ## 学科 性別 学年 学生数 ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 ## 11 経営学科 男 3年 111 ## 12 経営学科 男 4年 117 ## 13 経営学科 女 1年 62 ## 14 経営学科 女 2年 53 ## 15 経営学科 女 3年 62 ## 16 経営学科 女 4年 52 ## 17 金融学科 男 1年 93 ## 18 金融学科 男 2年 90 ## 19 金融学科 男 3年 107 ## 20 金融学科 男 4年 108 ## 21 金融学科 女 1年 36 ## 22 金融学科 女 2年 29 ## 23 金融学科 女 3年 33 ## 24 金融学科 女 4年 24 このデータでは「人数」という一つの変数のみの列があり、その他の属性もすべて縦の項目で表されている。これは、コンピューターによって処理しやすい形式であり、ベクトルの処理が得意なRでは縦長の形式が扱いやすい。 この縦長形式のデータをtidy data(整然データ)と呼ぶ tidy dataの定義 一つの列が一つの変数を表す 一つの行が一つの観測を表す 一つのテーブルが一つのデータセットだけを含む Rの中でもtidy dataでないデータが好ましい場合もある。しかし、tidy dataを基本にしておけば、そこから加工することは容易である。 6.4 データフレームを扱うテクニック：パイプ データフレームを操作する関数の共通点 - 第１引数がデータフレーム - 第２引数以降はそのデータフレームに対する操作 - 結果がデータフレームとして返される 6.4.1 パイプ パイプ(|&gt;)は「これまでの処理を次の第１引数として引き渡す」という機能を持つ。 パイプはかつて%&gt;%と書かれていて、tidyverse群の一つであるmagrittrパッケージの関数であった。新しい|&gt;という演算子はRにネイティブで入っているため、パッケージをロードしなくても使える。少し前のコードだと未だに%&gt;%と書いてあるかもしれないが基本的に同じ意味である（阿部はまだ癖で書いてしまう時がある）。 x1 &lt;- c(1,2,3,4,5) ## 以下の２つは同じことを行っている。 mean(x1) x1 |&gt; mean() ## |&gt; はパイプと呼ばれるもの 6.5 tidyでないデータとtidyデータの変換 学科 男 女 経済学科 533 172 経営学科 478 229 金融学科 398 122 今から横型（wide型）のデータを縦長（long型）に変換する。上のようなデータを下のようなデータに変換したいとする。 学科 性別 人数 経済学科 男 533 経済学科 女 172 経営学科 男 478 経営学科 女 229 金融学科 男 398 金融学科 女 122 6.5.1 long型データへの変換 tidyrというパッケージのpivot_longerという関数はtidyでないデータ(wide型)をtidyなデータ(long型)に変換する。 まずパイプ(|&gt;)でdata_634というwide型のデータを関数に引き渡す。 data_634_long &lt;- data_634 |&gt; pivot_longer() pivot_longer() 関数の引数 colsは、どの列(column)の変数を使うかを指定する names_toは、新たに生成されるカテゴリ用の列の名前を指定する values_toは、数値が入る列の名前を指定する data_634_long &lt;- data_634 |&gt; ## long型に変換。1年〜４年の列(cols)を学生数という列にvalues_toでまとめる。各行に何年生かnames_toで記録する。 pivot_longer( cols=c(&quot;1年&quot;,&quot;2年&quot;,&quot;3年&quot;,&quot;4年&quot;), names_to =&quot;学年&quot;, values_to = &quot;学生数&quot;) 6.5.2 データを見てみる 右上のEnvironmentペーンにdata_634_longというオブジェクトが生成される。 クリックしてみると、エクセルのような画面が現れる またView()という関数をつかっても、同じようにデータを見ることができる。 ## data_634_longを見るビューワーがRstudio上で開く View(data_634_long) 6.5.3 データを一部だけみたい場合 また、データの最初だけみたいときは、head(), また後ろだけ見たいときはtail()関数を使う。 デフォルトでは、6行だけ表示されるが、行数は引数nで調整できる。 ## data1の最初の10行がコンソールに表示される head(data_634_long, n=10) ## # A tibble: 10 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 6.6 データの「大きさ」 データの行数や列数を調べるときにはdim()関数を使う。 dim(data_634_long) ## [1] 24 4 24行、4列だとわかる。 RStudioではdata.frameオブジェクトは右上ペーンにも表示されている。 6.7 列の名前一覧 データの各変数名（列名）の一覧を見たい場合はnames()かcolnames() names(data_634_long) ## [1] &quot;学科&quot; &quot;性別&quot; &quot;学年&quot; &quot;学生数&quot; 6.8 変数の要約 含まれている変数の基本統計量を見たい場合はsummary()関数を使う。 summary(data_634_long) ## 学科 性別 学年 学生数 ## 経済学科:8 男:12 1年:6 Min. : 24.0 ## 経営学科:8 女:12 2年:6 1st Qu.: 44.0 ## 金融学科:8 3年:6 Median : 76.0 ## 4年:6 Mean : 80.5 ## 3rd Qu.:118.0 ## Max. :140.0 定性的なデータ（カテゴリ変数）は、入っているカテゴリとその数 もしcharacterと表示されていたら、単なる文字列と認識されている 定量的なデータは以下のような統計量が計算される。 Min. nth Qu. Median Mean Max. 最小 n分位 中央値 平均 最大 6.9 変数の取り出し データから変数を一つ取り出すときは$マークを使う。 ## データフレーム$変数 で変数の列をベクトルとして取り出す data_634_long$学年 ## [1] 1年 2年 3年 4年 1年 2年 3年 4年 1年 2年 3年 4年 1年 2年 3年 4年 1年 ## [18] 2年 3年 4年 1年 2年 3年 4年 ## Levels: 1年 2年 3年 4年 6.10 変数の取り出しと計算 ## 平均 mean()関数 mean(data_634_long$学生数) ## [1] 80.5 ## 中央値 median()関数 median(data_634_long$学生数) ## [1] 76 ## 分散 var()関数 var(data_634_long$学生数) ## [1] 1625.478 ## 合計 sum()関数 sum(data_634_long$学生数) ## [1] 1932 6.11 データフレームとtibble 6.12 データの操作 データを編集したいことはたくさん出てくる。 列の名前を変えたい データの特定の列だけ抽出したい データの特定の行だけ提出したい 例：男性だけのデータ データの順番を並び替えたい データの列を並び替えたい 新しい変数を作りたい データを集計したい 6.12.1 データの操作 tidyverseシリーズであるdplyrパッケージに入っている関数で操作することができる。 6.12.2 元のデータの見た目確認 print(data_634_long) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 ## # ℹ 14 more rows 6.12.3 列の名前を変えたい: rename() 列（変数）の名前を変更する data_634_long_eng &lt;- data_634_long |&gt; rename(department = 学科, grade = 学年, gender = 性別, stu_num = 学生数) print(data_634_long_eng) ## # A tibble: 24 × 4 ## department gender grade stu_num ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 ## # ℹ 14 more rows 6.12.4 特定の列だけ抽出する: select() データのうち、学科と性別という変数だけ抽出したいとする data_634_long_select &lt;- data_634_long |&gt; select(学科, 性別) print(data_634_long_select) ## # A tibble: 24 × 2 ## 学科 性別 ## &lt;fct&gt; &lt;fct&gt; ## 1 経済学科 男 ## 2 経済学科 男 ## 3 経済学科 男 ## 4 経済学科 男 ## 5 経済学科 女 ## 6 経済学科 女 ## 7 経済学科 女 ## 8 経済学科 女 ## 9 経営学科 男 ## 10 経営学科 男 ## # ℹ 14 more rows 6.12.5 特定の行だけ抽出する: filter() データのうち、女性のデータだけを抽出したいとする data_634_long_filter &lt;- data_634_long |&gt; filter(性別 == &quot;女&quot;) print(data_634_long_filter) ## # A tibble: 12 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 女 1年 38 ## 2 経済学科 女 2年 50 ## 3 経済学科 女 3年 46 ## 4 経済学科 女 4年 38 ## 5 経営学科 女 1年 62 ## 6 経営学科 女 2年 53 ## 7 経営学科 女 3年 62 ## 8 経営学科 女 4年 52 ## 9 金融学科 女 1年 36 ## 10 金融学科 女 2年 29 ## 11 金融学科 女 3年 33 ## 12 金融学科 女 4年 24 6.12.6 データの順番を並び替える: arrange() データの順番を学年-&gt;性別の順番で並び替える data_634_long_arrange &lt;- data_634_long |&gt; arrange(学年, 性別) print(data_634_long_arrange) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経営学科 男 1年 129 ## 3 金融学科 男 1年 93 ## 4 経済学科 女 1年 38 ## 5 経営学科 女 1年 62 ## 6 金融学科 女 1年 36 ## 7 経済学科 男 2年 139 ## 8 経営学科 男 2年 121 ## 9 金融学科 男 2年 90 ## 10 経済学科 女 2年 50 ## # ℹ 14 more rows 6.12.6.1 降順の並びにする デフォルトは昇順だが、desc()で降順で並び変えることもできる data_634_long_arrange2 &lt;- data_634_long |&gt; arrange(desc(学年), 性別) print(data_634_long_arrange2) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 4年 140 ## 2 経営学科 男 4年 117 ## 3 金融学科 男 4年 108 ## 4 経済学科 女 4年 38 ## 5 経営学科 女 4年 52 ## 6 金融学科 女 4年 24 ## 7 経済学科 男 3年 121 ## 8 経営学科 男 3年 111 ## 9 金融学科 男 3年 107 ## 10 経済学科 女 3年 46 ## # ℹ 14 more rows 6.12.7 データの列を並び替える: relocate() 学年の列を性別の前に持ってくる data_634_long_relocate &lt;- data_634_long |&gt; relocate(学年, .before=性別) print(data_634_long_relocate) ## # A tibble: 24 × 4 ## 学科 学年 性別 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 1年 男 133 ## 2 経済学科 2年 男 139 ## 3 経済学科 3年 男 121 ## 4 経済学科 4年 男 140 ## 5 経済学科 1年 女 38 ## 6 経済学科 2年 女 50 ## 7 経済学科 3年 女 46 ## 8 経済学科 4年 女 38 ## 9 経営学科 1年 男 129 ## 10 経営学科 2年 男 121 ## # ℹ 14 more rows 6.12.7.1 列の後ろに持ってくる場合 学年の列を学科の後に持ってくる data_634_long_relocate2 &lt;- data_634_long |&gt; relocate(学年, .after=学科) print(data_634_long_relocate2) ## # A tibble: 24 × 4 ## 学科 学年 性別 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 1年 男 133 ## 2 経済学科 2年 男 139 ## 3 経済学科 3年 男 121 ## 4 経済学科 4年 男 140 ## 5 経済学科 1年 女 38 ## 6 経済学科 2年 女 50 ## 7 経済学科 3年 女 46 ## 8 経済学科 4年 女 38 ## 9 経営学科 1年 男 129 ## 10 経営学科 2年 男 121 ## # ℹ 14 more rows 6.12.8 データの列を追加する: mutate() 新しく、学生数を100で割った数値を作るとする data_634_long_mutate &lt;- data_634_long |&gt; mutate(学生数100 = 学生数/100) print(data_634_long_mutate) ## # A tibble: 24 × 5 ## 学科 性別 学年 学生数 学生数100 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 1.33 ## 2 経済学科 男 2年 139 1.39 ## 3 経済学科 男 3年 121 1.21 ## 4 経済学科 男 4年 140 1.4 ## 5 経済学科 女 1年 38 0.38 ## 6 経済学科 女 2年 50 0.5 ## 7 経済学科 女 3年 46 0.46 ## 8 経済学科 女 4年 38 0.38 ## 9 経営学科 男 1年 129 1.29 ## 10 経営学科 男 2年 121 1.21 ## # ℹ 14 more rows 6.12.9 データの列を編集する: mutate() 存在する変数名にすると、新しく変数(列)を作らずに上書きする data_634_long_mutate2 &lt;- data_634_long |&gt; mutate(学生数 = 学生数/100) print(data_634_long_mutate2) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 1.33 ## 2 経済学科 男 2年 1.39 ## 3 経済学科 男 3年 1.21 ## 4 経済学科 男 4年 1.4 ## 5 経済学科 女 1年 0.38 ## 6 経済学科 女 2年 0.5 ## 7 経済学科 女 3年 0.46 ## 8 経済学科 女 4年 0.38 ## 9 経営学科 男 1年 1.29 ## 10 経営学科 男 2年 1.21 ## # ℹ 14 more rows 6.12.10 データを集計する 任意を列を集計したり統計量を計算する。 data_634_long_summarise &lt;- data_634_long |&gt; summarise(学生数合計 = sum(学生数), 学生数平均 = mean(学生数)) print(data_634_long_summarise) ## # A tibble: 1 × 2 ## 学生数合計 学生数平均 ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1932 80.5 6.12.11 データ操作の応用：パイプによる引き渡し ある操作を行った結果をパイプで次の関数に引き渡す。 ## 女性の合計だけを知りたい data_634_long_female &lt;- data_634_long |&gt; filter(性別==&quot;女&quot;) |&gt; summarise(女性学生数合計 = sum(学生数)) print(data_634_long_female) ## # A tibble: 1 × 1 ## 女性学生数合計 ## &lt;dbl&gt; ## 1 523 6.12.12 データ操作の応用：グループごとの集計 グループごとに集計したい場合はgroup_byでグループ情報を与える ## 学科ごとに合計を計算 data_634_long_dept &lt;- data_634_long |&gt; group_by(学科) |&gt; summarise(学生数合計 = sum(学生数)) print(data_634_long_dept) ## # A tibble: 3 × 2 ## 学科 学生数合計 ## &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 705 ## 2 経営学科 707 ## 3 金融学科 520 6.13 練習問題: データ操作 武蔵大学経済学部の学生数データを使って、女性のみの合計学生数を学年別で計算せよ。結果をdata_634_long_female_gradeというオブジェクトに格納し、結果をコンソールに表示せよ。 同じデータを使って、１,２年生のみ合計学生数を男女別・学年別で計算せよ。結果をdata_634_long_1_2_gradeというオブジェクトに格納し、結果をコンソールに表示せよ。 6.14 データの結合 ２つのデータフレームを結合したい場合 縦に結合したい場合 横に結合したい場合 6.14.1 データの縦の結合 例えば人文学部のデータと結合したいとする。 人文学部のデータはこちらからダウンロードできる。 ## エクセルからデータを読み込み data_634_jinbun &lt;- readxl::read_excel(&quot;docs/r_basics/data/musashi_jinbun_students_2023.xlsx&quot;) knitr::kable(data_634_jinbun) ## kableは見やすい表を出力する関数 学科 性別 4年 3年 2年 1年 英語英米文化学科 男 53 73 65 51 英語英米文化学科 女 74 72 77 55 ヨーロッパ文化学科 男 43 47 37 68 ヨーロッパ文化学科 女 60 66 63 56 日本・東アジア文化学科 男 50 46 48 45 日本・東アジア文化学科 女 61 78 75 74 変数の順番などが同じことを確認した上で、bind_rows()を使う data_634_keizai_jinbun &lt;- bind_rows(data_634,data_634_jinbun) print(data_634_keizai_jinbun) ## # A tibble: 12 × 6 ## 学科 性別 `4年` `3年` `2年` `1年` ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 経済学科 男 140 121 139 133 ## 2 経済学科 女 38 46 50 38 ## 3 経営学科 男 117 111 121 129 ## 4 経営学科 女 52 62 53 62 ## 5 金融学科 男 108 107 90 93 ## 6 金融学科 女 24 33 29 36 ## 7 英語英米文化学科 男 53 73 65 51 ## 8 英語英米文化学科 女 74 72 77 55 ## 9 ヨーロッパ文化学科 男 43 47 37 68 ## 10 ヨーロッパ文化学科 女 60 66 63 56 ## 11 日本・東アジア文化学科 男 50 46 48 45 ## 12 日本・東アジア文化学科 女 61 78 75 74 6.14.2 データを横に統合 新しい変数を含んだデータを既存のデータに統合したい ## エクセルからデータを読み込み data_634_keizai_teiin &lt;- readxl::read_excel(&quot;docs/r_basics/data/musashi_keizai_teiin_2023.xlsx&quot;) knitr::kable(data_634_keizai_teiin) ## kableは見やすい表を出力する関数 学科 定員 経済学科 580 経営学科 580 金融学科 440 6.14.3 データを横に統合：join()関数 ここではleft_joinを使う。学科という変数をキーとして、左側に存在するすべての行にデータを統合する。 ## 学科の人数と学科の定員を統合する data_634_long_keizai &lt;- data_634_long |&gt; left_join(data_634_keizai_teiin, by=c(&quot;学科&quot;=&quot;学科&quot;)) print(data_634_long_keizai) ## # A tibble: 24 × 5 ## 学科 性別 学年 学生数 定員 ## &lt;chr&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 580 ## 2 経済学科 男 2年 139 580 ## 3 経済学科 男 3年 121 580 ## 4 経済学科 男 4年 140 580 ## 5 経済学科 女 1年 38 580 ## 6 経済学科 女 2年 50 580 ## 7 経済学科 女 3年 46 580 ## 8 経済学科 女 4年 38 580 ## 9 経営学科 男 1年 129 580 ## 10 経営学科 男 2年 121 580 ## # ℹ 14 more rows 6.14.4 join関数一覧 上で使用したleft_join以外にもいくつかのjoin関数が用意されている。 関数名 説明 inner_join() どちらのデータフレームにも存在するキーの行のみ返す left_join() 左のデータフレームに存在するキーの行を返す right_join() 右のデータフレームにも存在するキーの行を返す full_join() いずれかのデータフレームに存在するキーの行を返す "],["rstats.html", "Chapter 7 記述統計 7.1 統計とは 7.2 データとは 7.3 代表的な統計量 7.4 Rによる記述統計のテクニック", " Chapter 7 記述統計 7.1 統計とは 統計学はおおまかに記述統計と推測統計の２つから成り立っている。記述統計は得られたデータからその特徴を抜き出す統計であり、推測統計は全体の把握が難しいような大きな対象やまだ起こっていないことなどに対して推測を行う統計である。 7.1.1 記述統計 記述統計の代表的なものに人口統計がある。その国や地域に現在人口が何人いるか？男女比は？年齢構成は？などの特徴を把握するための手続きである。 記述統計を行うためには、ヒストグラムなどのビジュアライゼーションと、平均値・標準偏差などの統計量による記述の方法がある。 7.1.2 推測統計 たとえば、日本人全員の身長を知ろうとして、全員を調査するのは難しい。しかし、全員を調査をできなくても、一部の人を調査することで全体を推測することができる。 身近なものには選挙の当確がある。例えば、AさんとBさんのいずれかを選ぶ投票を行い、1万人が投票したとする。過半数を取らないと当選にならないので、少なくともいずれかが5000票獲得するまでは勝負は決まらない。しかし、開票率１％で当確が出ることがある。1万票の１％は100票である。それだけしか開票していないのになぜ「当選確実」といえるのだろうか。  票が入った箱をよく混ぜてそこから100票を取り出すとしよう。そして、90票がAさんで、のこり10票がBさんだったどうだろうか。おそらくAさんが勝つだろうということになる。かなり高い確率で、残りの9900票の多数もAさんに投票されていると考えるのが妥当だからだ。もちろん確率の問題であるため、当確が取り消されることもまれにある。しかし、ある程度の間違いがあるとしたうえで、まだわからないもの、もしくは規模が大きすぎてわからないものを少ないサンプルで推測しようとするのが推測統計である。    このような推測統計を行う際には「よく混ぜる」ことが重要である。イメージとしてはコーヒーにミルクを混ぜる場合である。しっかりとかき混ぜれば、スプーンで掬った一部とカップの中は同じ濃さのはずであるが、きちんと混ざっていなければ、まだ良く混ざっていないコーヒーの部分を掬ってもカップの中の味を再現することはできない。 7.2 データとは 統計において分析する対象はデータである。データには様々な形があるが、一般的には数値や文字情報の集まりである。 以下のコードを実行してみよう。すると、100個の数値が並ぶ。これをランダムにサンプリングして計測した日本人男性の身長だとしよう。 set.seed(3) height &lt;- rnorm(100,mean=170,sd=10) |&gt; round() height ## [1] 160 167 173 158 172 170 171 181 158 183 163 159 163 173 172 167 ## [17] 160 164 182 172 164 161 168 153 165 163 182 180 169 159 179 179 ## [33] 177 177 166 177 183 170 160 178 178 167 187 162 173 147 168 181 ## [49] 165 161 177 162 173 153 156 165 160 184 179 162 176 179 173 174 ## [65] 182 165 166 180 157 172 170 175 180 173 172 177 182 174 160 168 ## [81] 187 166 177 182 178 170 172 161 174 161 161 160 163 181 166 169 ## [97] 165 175 179 168 この数字を見てどう思うか？ 「ああ、数字が並んでいるなぁ」 「自分はこの中では高いほうかな」 などと思うかもしれない。 まず、身長はみんな同じではない。言い換えると、様々な数値を取る。これを分布すると呼ぶ。 なぜ数値は分布するのだろうか。それは、データを生み出す背景に不確実性があるから。日本人男性の身長が決まるメカニズムが存在する。また個々人で条件が異なる。そういった背景が身長という数値となって現れている。 一方で、数字の決まり方には特徴や癖がある。たとえば身長1cmや身長100mの人はいない。「普通」の身長に近いひとは多く、特に低い人や高い人は数としては少ない。こういった分布の特性がある。どうやって特徴や癖を把握すればいいのか？ 数字がざっと並んでいるだけでは、イマイチよくわからない。そこで、生データ（生の現実）から、特徴や癖を引き出す手法が統計なのである。 ではどのように特徴や癖を引き出すか。これにはデータの縮約を行う。 縮約とはデータとして並んでいるたくさんの数字を、なにかの基準で整理整頓して、意味のある情報だけを抽出することである。 縮約には大きく分けて二つの方法がある。一つ目は、1つの数字で特徴を代表させる方法である。この代表される数字を統計量である。二つ目は、グラフ化してその特徴をとらえようとすることである。近年ではVisualizationとも呼ばれる。 この章では代表的な統計量をおさらいし、そのRでの計算方法を学ぶ。 7.3 代表的な統計量 7.3.1 数式 まず、数式の読み方について簡単におさらいする。数式は英語と同じで意味がわかれば怖いものではないので、一つずつ確認しよう。 統計学では、データを表現するのによく文字を使う。例えば\\(x\\)である。しかし、データが100個ある場合には、\\(x_{1},x_{2},\\ldots,x_{100}\\)といったように、右下に添え字をつけてデータを区別する。このとき、一般的な言い方をするために\\(i\\)番目のデータを\\(x_{i}\\)と表記することがある。 ここで、厳密には統計量ではないが、データの合計の計算方法を勉強しよう。 例えば上の身長の例のように、100個のデータを合計するためには、100個の数値を足す必要がある。それを数式で表現すると、 \\[ x_1 + x_2 + x_3 +\\cdots + x_{100} \\] のように、100個の数字を書く必要があるが、現実には書けない。 そこで、数列の和の記号であるシグマを使う。 \\[ \\sum^{100}_{i=1}x_i = x_1 + x_2 + x_3 +\\cdots + x_{100} \\] 上の左辺のシグマ記号で書かれたものは、右辺と同じ意味である。 つまり上のシグマ記号\\(\\sum\\)は、「\\(i=1\\)から、\\(100\\)までの\\(x_i\\)を足し合わせる」という意味を持つ。 合計をRで計算するときには、sum()という関数を使って以下のようになる。ここではheightというオブジェクトに100個の数値を持つベクトルが入っているため、sum()はベクトルのすべての数値を足し合わせる。 sum(height) ## [1] 17008 7.3.2 平均 もっとも身近な統計量は平均であろう。統計学において平均値とは一般的に算術平均（相加平均）を指す。これはすべてのデータを合計し、それをデータの個数で割ることで求められる。 統計ではよくデータ\\(x_{i}\\)の平均を、\\(x\\)に棒をつけて\\(\\bar{x}\\)と表現する。 \\[ \\bar{x} = \\frac{1}{n}\\sum^{n}_{i=1}x_i \\] これをRで計算するときには、mean()という関数が用意されている。 mean(height) ## [1] 170.08 7.3.3 中央値 中央値は、一言でいうと「真ん中」にある数値である。数値を小さい順に並べ、その真ん中にある数値を代表値として選ぶ。これは平均値と一致することもあれば、異なることもある。 もう少し厳密に定義すると、 \\(n\\)個の観測値からなるデータ(\\(x_1,x_2,\\ldots,x_n\\))を小さい順に並べたものを(\\(x_1&#39;,x_2&#39;,\\ldots,x_{n}&#39;\\)) とする。中央値\\(Q_{\\frac{1}{2}}\\)は \\[ Q_{\\frac{1}{2}} = \\begin{cases} x_{\\frac{n}{2}} &amp; \\text{もし } n \\text{が奇数の場合} \\\\ \\frac{1}{2}(x_{\\frac{n}{2}} + x_{\\frac{n}{2}+1}) &amp; \\text{もし } n \\text{が偶数の場合} \\end{cases} \\] 難しく見えるかもしれないが、単純なことを行っている。\\(n\\),つまりデータの個数が奇数ならば、「真ん中」の数値が中央値となる。データの個数が5なら3番目, 99なら50番目である。 もし、データが偶数ならば、「真ん中」の数値はない。そこで、ちょうど真ん中を挟む二つの数字の平均を取る。100個のデータがあるならば、50番目と51番目の数字の平均を取ることで中央値とする。 Rでの計算はmedian()関数を用いる。medianは文字通り英語で中央値という意味である。 median(height) ## [1] 170 7.3.4 最大値・最小値 データの中で最も大きい数値、小さい数値もデータの特徴を表す。 Rではmax()関数, min()関数で算出できる。 # データの最大値 max(height) ## [1] 187 # データの最小値 min(height) ## [1] 147 7.3.5 分散 分散は、データのばらつきを示す統計量である。数値が大きければデータは互いに大きく異なる数値を取っており、小さけば近い数値を取っている。分散は、それぞれのデータの数値から平均値を引き、それを二乗することで求められる。 \\[ \\sigma^2 = \\frac{1}{n}\\sum^{n}_{i=1}( x_i - \\bar{x})^2 \\] Rで分散を計算する関数はデフォルトでは用意されていない。なぜないのかは、Section 9の不偏分散の項で説明する。 分散をRで計算すると、自分で数式を表現する必要があるが以下のようになる。 height_mean &lt;- mean(height) # heightの平均値 height_n &lt;- length(height) # heightのデータの個数 sigma2 = sum((height-height_mean)^2)/height_n sigma2 ## [1] 72.9936 7.3.6 もう一つの分散：不偏分散 不偏分散は同じくデータの散らばりを示す統計量である。標本分散と呼んだり、文脈によっては単に分散と呼んでこちらを指す場合もある。 詳しくは推定統計量の項で説明する。 分散との違いは、nで割るか、n-1で割るかの違いである。 \\[ s^2 = \\frac{1}{n-1}\\sum^{n}_{i=1}( x_i - \\bar{x})^2 \\] Rではvar()関数で計算できる。 s2 = var(height) s2 ## [1] 73.73091 7.3.7 標準偏差 標準偏差もデータのばらつきを表す。 分散もばらつきを表す統計量なので、なぜ二つあるのか？と思うかもしれない。 分散は、データのばらつきを二乗してから合計してデータ数で割っている。そのため、数値大きさはばらつきを示すが、その数値の単位は二乗されてしまっている。身長のケースで言えば\\(cm^2\\)となっているのである。 これでは平均に対してばらつきが大きいのか小さいのかわかりにくい。 そこで、標準偏差は分散の平方根（ルート）を取ることで、計算される。 二乗のルートなので、単位がもとに戻って解釈しやすくなるのである。 \\[ \\sigma = \\sqrt{\\sigma^2} \\] ここでは単純に上で計算した分散のルーとしてを計算しよう。ルートはsqrt()という関数で計算できる。 sigma = sqrt(sigma2) sigma ## [1] 8.543629 7.3.8 不偏標準偏差 標準偏差を計算するために、不偏分散を用いたものが不偏標準偏差である。標本標準偏差と呼ばれたり、文脈によっては単に標準偏差とよんでこちらを指す場合もある。 以下の記述統計などではこちらが一般的に使われる。 理由は推定統計量の項を参照してほしい。 \\[ s = \\sqrt{s^2} \\] 不偏標準偏差は上と同様にルートでも計算できるが、sd()という関数が用意されている。確認するために、いずれの方法でも計算してみよう。 s = sqrt(s2) s ## [1] 8.58667 sd関数を使う場合 s = sd(height) s ## [1] 8.58667 7.4 Rによる記述統計のテクニック ここでは、簡単に記述統計を示すテクニックを紹介する。 データ分析を行う上で、手元のデータがどういうデータなのかを記述統計で見るのは重要である。 また、論文にする際にも、まずはデータの説明として記述統計表を示すのが一般的である。 7.4.1 使用するデータ ここではRにもともと入っているmtcarsというデータを使用する。 1974年にアメリカのMotor Trendという雑誌に掲載された燃費などの性能を比較したデータである。 例えばmpgは燃費（１ガロン当たりのマイル）、cylはシリンダーの数、hpはエンジンの馬力、wtは重さ、などである。 詳しく知りたい人は、RStudioの右下ペーンの[Help]タブから、mtcarsと検索してみよう。 data(mtcars) #データの呼び出し mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 7.4.2 summary関数 summaryというRデフォルトの関数(base関数と呼ぶ)を使うと、最小・最大・平均・中央値・四分位点などが表示される。 summary(mtcars) ## mpg cyl disp hp ## Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 ## 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 ## Median :19.20 Median :6.000 Median :196.3 Median :123.0 ## Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 ## 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 ## Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 ## drat wt qsec vs ## Min. :2.760 Min. :1.513 Min. :14.50 Min. :0.0000 ## 1st Qu.:3.080 1st Qu.:2.581 1st Qu.:16.89 1st Qu.:0.0000 ## Median :3.695 Median :3.325 Median :17.71 Median :0.0000 ## Mean :3.597 Mean :3.217 Mean :17.85 Mean :0.4375 ## 3rd Qu.:3.920 3rd Qu.:3.610 3rd Qu.:18.90 3rd Qu.:1.0000 ## Max. :4.930 Max. :5.424 Max. :22.90 Max. :1.0000 ## am gear carb ## Min. :0.0000 Min. :3.000 Min. :1.000 ## 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 ## Median :0.0000 Median :4.000 Median :2.000 ## Mean :0.4062 Mean :3.688 Mean :2.812 ## 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 ## Max. :1.0000 Max. :5.000 Max. :8.000 7.4.3 describe関数 describe関数を使うと、簡単にデータ数(n)、平均、標準偏差や範囲を計算することができる。ここで計算されている標準偏差は不偏標準偏差である。 library(psych) describe(mtcars, skew=FALSE) ## vars n mean sd median min max range se ## mpg 1 32 20.09 6.03 19.20 10.40 33.90 23.50 1.07 ## cyl 2 32 6.19 1.79 6.00 4.00 8.00 4.00 0.32 ## disp 3 32 230.72 123.94 196.30 71.10 472.00 400.90 21.91 ## hp 4 32 146.69 68.56 123.00 52.00 335.00 283.00 12.12 ## drat 5 32 3.60 0.53 3.70 2.76 4.93 2.17 0.09 ## wt 6 32 3.22 0.98 3.33 1.51 5.42 3.91 0.17 ## qsec 7 32 17.85 1.79 17.71 14.50 22.90 8.40 0.32 ## vs 8 32 0.44 0.50 0.00 0.00 1.00 1.00 0.09 ## am 9 32 0.41 0.50 0.00 0.00 1.00 1.00 0.09 ## gear 10 32 3.69 0.74 4.00 3.00 5.00 2.00 0.13 ## carb 11 32 2.81 1.62 2.00 1.00 8.00 7.00 0.29 7.4.4 skim関数 skim関数を使うと、記述統計に加えて簡単なヒストグラムも図示してくれる。ここで計算されている標準偏差は不偏標準偏差である。 library(skimr) skim(mtcars) Table 7.1: Data summary Name mtcars Number of rows 32 Number of columns 11 _______________________ Column type frequency: numeric 11 ________________________ Group variables None Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist mpg 0 1 20.09 6.03 10.40 15.43 19.20 22.80 33.90 ▃▇▅▁▂ cyl 0 1 6.19 1.79 4.00 4.00 6.00 8.00 8.00 ▆▁▃▁▇ disp 0 1 230.72 123.94 71.10 120.83 196.30 326.00 472.00 ▇▃▃▃▂ hp 0 1 146.69 68.56 52.00 96.50 123.00 180.00 335.00 ▇▇▆▃▁ drat 0 1 3.60 0.53 2.76 3.08 3.70 3.92 4.93 ▇▃▇▅▁ wt 0 1 3.22 0.98 1.51 2.58 3.33 3.61 5.42 ▃▃▇▁▂ qsec 0 1 17.85 1.79 14.50 16.89 17.71 18.90 22.90 ▃▇▇▂▁ vs 0 1 0.44 0.50 0.00 0.00 0.00 1.00 1.00 ▇▁▁▁▆ am 0 1 0.41 0.50 0.00 0.00 0.00 1.00 1.00 ▇▁▁▁▆ gear 0 1 3.69 0.74 3.00 3.00 4.00 4.00 5.00 ▇▁▆▁▂ carb 0 1 2.81 1.62 1.00 2.00 2.00 4.00 8.00 ▇▂▅▁▁ "],["rviz.html", "Chapter 8 ビジュアライゼーションの基本 8.1 Rにおける描画 8.2 描画をしてみよう 8.3 復習：データ読み込み 8.4 描画の前に 8.5 キャンバスを用意する 8.6 グラフのレイヤーを追加する 8.7 文字化けに対処する 8.8 aesに色を追加する 8.9 男女の置き方を変えたい 8.10 aesに色を追加する 8.11 色を変えたい 8.12 学科別に分けたい 8.13 ラベルを変更する・タイトルを追加する 8.14 ラベルを変更する・タイトルを追加する 8.15 テーマを変更する1 8.16 テーマを変更する2 8.17 完成形 8.18 ggplot2による図の保存 8.19 他の描画レイヤー 8.20 練習問題: 折れ線グラフ 8.21 箱ひげ図 8.22 ヴァイオリンプロット 8.23 適した描画？", " Chapter 8 ビジュアライゼーションの基本 8.1 Rにおける描画 データを可視化するビジュアリゼーションは、プレゼンテーションだけではなく分析者自身がデータを理解するためにも有効で重要なテクニック。 Rにはデフォルトの描画関数も用意されているが、tidyverseシリーズのggplot2というパッケージの関数が強力であり昨今はスタンダードになっていることから、こちらを紹介する。 ggplot2とは、グラフィックの文法 (grammar of graphics)という概念に基づいて作図するパッケージ 8.2 描画をしてみよう Ch.2の武蔵大学経済学部の学生数のデータを作ってみよう。 8.3 復習：データ読み込み # エクセルからデータを読み込み data_634 &lt;- readxl::read_excel(&quot;docs/r_basics/data/musashi_keizai_students_2023.xlsx&quot;) # long型(tidy data)に変換 data_634_long &lt;- data_634 |&gt; # long型に変換。1年〜４年の列(cols)を学生数という列にvalues_toでまとめる。各行に何年生かnames_toで記録する。 pivot_longer(cols=c(&quot;1年&quot;,&quot;2年&quot;,&quot;3年&quot;,&quot;4年&quot;),names_to =&quot;学年&quot;,values_to = &quot;学生数&quot;) 8.4 描画の前に データに少し工夫を加える データは文字列（カテゴリ）の順番を勝手に決めてしまう。 文字列をファクター型に変換する。 描画するときにカテゴリの順番を揃えたいので、順番の情報を与える。 8.5 キャンバスを用意する まずキャンバスを用意するイメージでggplot()関数を呼び出す plot_634 &lt;- ggplot() print(plot_634) 8.6 グラフのレイヤーを追加する グラフの種類ごとにデータを表現する幾何学的オブジェクトgeom_が用意されている geom_barは棒グラフで表現する。 引数として、用いるデータdata, x軸, y軸, 色などにデータを割り当てるmapping,そして、変数をどう扱うかというstatがある。 mappingにはaesという関数を使ってデータを当てはめる。 x軸は学年、y軸は学生数とする。 statにはデータそのものの数値を使うため、\"identity\"を指定する。 plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数),stat=&quot;identity&quot;) # &lt;- 追加！ print(plot_634) 8.7 文字化けに対処する Macを使っていると、ggplotで日本語を使うと文字化けすることが知られている 豆腐化現象と呼ばれている 文字化けに対処するため、日本語のフォントを指定する。 Windowsは多分不要。 新しくtheme_greyというレイヤーを作り、その中のbase_familyという引数でフォント名\"HiraKakuPro-W3\"を指定する。 plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数),stat=&quot;identity&quot;) + theme_grey(base_family=&quot;HiraKakuPro-W3&quot;) # &lt;- 追加！ print(plot_634) 8.8 aesに色を追加する 男女別に表示したいので、男女を色で分けたい マッピングでaesの中に色の変数として性別を指定する。 色のマッピングには二種類あり、点・線・枠の色を指定するcolorと、面の色を指定するfillがある。 この場合は塗りつぶしたいので、fillを指定する。 色は指定しなければ自動的に決められる。 plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別),stat=&quot;identity&quot;)+ # &lt;- 追加！ theme_grey(base_family=&quot;HiraKakuPro-W3&quot;) print(plot_634) 8.9 男女の置き方を変えたい 男女を縦に積むのではなく、横に置くことで対比がしやすくなりそう。 geom_bar()の引数のpositionをdodgeに指定する。 デフォルトはstackになっている（文字通り「積む」） 8.10 aesに色を追加する plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別), # &lt;- 追加！ stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ theme_grey(base_family=&quot;HiraKakuPro-W3&quot;) print(plot_634) 8.11 色を変えたい 色は指定しなければ自動的に決まる わかりやすい、おしゃれな色を使いたい場合はマニュアルで変えられる scale_fill_manual()の中でvalueという色で変えることが可能。 複数指定する場合はc()の中に並べてベクトルとして扱う 色の順番に注意 簡単な色の名前(例：\"blue\", \"red\")でも指定できるし、RGB値でも決められる RGB値はネットで検索してみよう ここでは、武蔵大学のロゴの緑と黄色を使う。 plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別), stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ scale_fill_manual(values =c(&quot;#0A6648&quot;,&quot;#F6B21B&quot;)) + # &lt;- 追加！ theme_grey(base_family=&quot;HiraKakuPro-W3&quot;) print(plot_634) 8.12 学科別に分けたい 現状では、学科の人数がすべて積算されてしまっているが、データとしては分かれている せっかくなので別で表示したいが、もうx軸もy軸も色も使ってしまっている。 では、グラフ自体を分けてしまおう facet_wrap()というレイヤーを使う ~の後に分割に使うカテゴリを指定することで、分割した図を作ってくれる plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別), stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ scale_fill_manual(values =c(&quot;#0A6648&quot;,&quot;#F6B21B&quot;)) + theme_grey(base_family=&quot;HiraKakuPro-W3&quot;) + facet_wrap(~ 学科) # &lt;- 追加！ print(plot_634) 8.13 ラベルを変更する・タイトルを追加する 通常はラベルを明示する lab()レイヤーの中で、X軸ならx=, Y軸ならy=で変更する 色の凡例のタイトルもfill= 今回は学年は明らか、学生数もタイトルで明示するので空欄とする 空欄としたい場合は\"\" タイトルを追加する場合は、title= サブタイトルもsubtitle=で追加できる 右下のノートもcaption=で追加できる 8.14 ラベルを変更する・タイトルを追加する plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別), stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ scale_fill_manual(values =c(&quot;#0A6648&quot;,&quot;#F6B21B&quot;)) + labs(fill=&quot;&quot;,x=&quot;&quot;,y=&quot;&quot;, # &lt;- 追加! title=&quot;武蔵大学経済学部の学科別・男女別学生数&quot;, # &lt;- 追加! subtitle=&quot;2023年5月1日時点&quot;, # &lt;- 追加! caption = &quot;データ元：武蔵大学公式ウェブサイト&quot;) + # &lt;- 追加! theme_grey(base_family=&quot;HiraKakuPro-W3&quot;) + facet_wrap(~ 学科) # &lt;- 追加！ 8.15 テーマを変更する1 テーマ (theme)はggplotの細かい見た目を設定する 背景、軸の有無、グリッドの数や濃さ、軸ラベルの字の大きさなどなど ggplotは背景がグレーのテーマがデフォルト themeレイヤーで細かい設定を行う theme_***でデフォルトテーマを使うこともできる ここでどんなテーマがあるか見られる ここではは見た目をスッキリさせるデフォルトテーマtheme_minimalを使ってみる plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別), stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ scale_fill_manual(values =c(&quot;#0A6648&quot;,&quot;#F6B21B&quot;)) + labs(fill=&quot;&quot;,x=&quot;&quot;,y=&quot;&quot;, title=&quot;武蔵大学経済学部の学科別・男女別学生数&quot;, subtitle=&quot;2023年5月1日時点&quot;, caption = &quot;データ元：武蔵大学公式ウェブサイト&quot;) + theme_minimal(base_family=&quot;HiraKakuPro-W3&quot;) + # &lt;- 変更! facet_wrap(~ 学科) ## &lt;- 追加！ 8.16 テーマを変更する2 細かいテーマ設定をthemeレイヤーの中で行う panel.grid.major.xはメインのグリッドの設定 element_blank()は、「空」にするという設定 legend.positionで、凡例を右ではなく下\"bottom\"に textで図の中の文字を設定 element_text()で設定する size=15としてフォントサイズを15にする。 plot_634 &lt;- ggplot() + geom_bar(data=data_634_long, mapping=aes(x=学年, y=学生数, fill=性別), stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ scale_fill_manual(values =c(&quot;#0A6648&quot;,&quot;#F6B21B&quot;)) + labs(fill=&quot;&quot;,x=&quot;&quot;,y=&quot;&quot;, title=&quot;武蔵大学経済学部の学科別・男女別学生数&quot;, subtitle=&quot;2023年5月1日時点&quot;, caption = &quot;データ元：武蔵大学公式ウェブサイト&quot;) + theme_minimal(base_family=&quot;HiraKakuPro-W3&quot;) + theme(panel.grid.major.x = element_blank(), # &lt;- 追加! legend.position = &quot;bottom&quot;, # &lt;- 追加! text = element_text(size=15)) + # &lt;- 追加! facet_wrap(~ 学科) 8.17 完成形 8.18 ggplot2による図の保存 ggplotで作図した結果をオブジェクトに保存 ここの例ではplot_634に保存 figという名前のフォルダを作っておく。 ggsaveという関数で、ファイルパスを指定して保存 fileという引数に、\"fig/musashi_students_2023.png\"と指定 figディレクトリの下にmusashi_students_2023という名前でpng形式ファイルとして保存するという意味 plotに保存したいggplotオブジェクト（描画したもの）を指定 deviceに保存したい画像形式を指定。ここではpngを指定している。他にはtiff,pdf,jpgなど。 # ggsave()関数を使って、図を保存 # file: 保存する場所, plot: 図のオブジェクト, device: 保存する形式 ggsave(file=&quot;fig/musashi_students_2023.png&quot;, plot=plot_634, device=&quot;png&quot;) 8.19 他の描画レイヤー 関数 描画 geom_point 散布図 geom_line 折れ線グラフ geom_boxplot 箱ひげ図 geom_violin バイオリンプロット geom_map 地図を描く 他にも多くの描画レイヤーが存在する 参考 8.19.1 演習：散布図 ここではdiamondsというggplotに付属しているデータセットを使う。 このデータには、ダイヤモンドの一つ一つのクオリティとその価格が記録されている。クオリティはいやゆるダイヤモンドの4Cと言われるカラット(Carat), カット(Cut), 色(Color), 透明性(Clarity)で表されている。 ここでは、大きさであるカラットと価格の関係性、さらに色の影響を見てみる。 # diamondsというデータを読みこむ data(diamonds) # diamondsの変数を確認する names(diamonds) ## [1] &quot;carat&quot; &quot;cut&quot; &quot;color&quot; &quot;clarity&quot; &quot;depth&quot; &quot;table&quot; ## [7] &quot;price&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; # diamondsのデータの冒頭を確認する head(diamonds) ## # A tibble: 6 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 課題：以下の画像を作成してみよう。 8.20 練習問題: 折れ線グラフ ここではeconomicsというggplotに付属しているデータセットを使う。 このデータには、アメリカの主要な経済指標が時系列データとして記録されている。dateは年月、popは人口(1000人)、psavertは個人貯蓄率、unempmedは失業期間の中央値（週）、unemployは失業数（1000人）である。 # economicsというデータを読みこむ data(economics) # diamondsの変数を確認する names(economics) ## [1] &quot;date&quot; &quot;pce&quot; &quot;pop&quot; &quot;psavert&quot; &quot;uempmed&quot; &quot;unemploy&quot; # diamondsのデータの冒頭を確認する head(economics) ## # A tibble: 6 × 6 ## date pce pop psavert uempmed unemploy ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1967-07-01 507. 198712 12.6 4.5 2944 ## 2 1967-08-01 510. 198911 12.6 4.7 2945 ## 3 1967-09-01 516. 199113 11.9 4.6 2958 ## 4 1967-10-01 512. 199311 12.9 4.9 3143 ## 5 1967-11-01 517. 199498 12.8 4.7 3066 ## 6 1967-12-01 525. 199657 11.8 4.8 3018 課題：アメリカの失業数の変遷の折れ線グラフを作成しよう。 8.21 箱ひげ図 geom_boxplotで箱ひげ図を描く 変数の分布を確認するのに有効 XとYの変数を指定する ここではmpgというggplotに付属しているデータセットを使う 車の種類をx軸, 各自動車の燃費をy軸 ] plot_boxplot &lt;- ggplot(data=mpg) + geom_boxplot(aes(x=class,y=hwy)) 8.22 ヴァイオリンプロット geom_violinでヴァイオリンプロットを描く 変数の分布を確認するのに有効 XとYの変数を指定する ここではmpgというggplotに付属しているデータセットを使う 車の種類をx軸, 各自動車の燃費をy軸 plot_violin &lt;- ggplot(data=mpg) + geom_violin(aes(x=class,y=hwy)) 8.23 適した描画？ 分析の目的やデータのタイプによって、用いたいグラフは異なる。どのような目的でデータ描画を行うのか考えてから描画に取りかかろう。 Figure 8.1: データタイプ別のグラフ 棒グラフ：データの大きさを比較する 折れ線グラフ：時系列での変化をみる 円グラフ：全体に占める割合をみる 積み上げ棒グラフ：累積データから内訳を比較する 散布図：2つのデータの相関関係をみる 例：グラフの種類と使い分け、間違った使い方(Tableau) "],["rstatsinfe.html", "Chapter 9 推測統計のおさらい", " Chapter 9 推測統計のおさらい 9.0.1 不偏分散 不偏分散は、分散と同じくデータのばらつきを示している。これは、 \\[ s^2 = \\frac{1}{n-1}\\sum^{n}_{i=1}( x_i - \\bar{x})^2 \\] 9.0.2 母集団と標本 母集団 母数？ サンプルサイズ サンプル数？ 9.0.3 サンプリング 無作為抽出 (ランダムサンプリング) 多段抽出法 層化抽出法 9.0.4 共分散 \\[\\sigma_{xy} = \\frac{1}{n}\\sum^{n}_{i=1}(x_i - \\bar{x})(y_i - \\bar{y})\\] 9.0.5 相関係数 \\[ \\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y} \\] "],["simpleregression.html", "Chapter 10 単回帰分析 10.1 ２つの変数の関係 10.2 回帰分析", " Chapter 10 単回帰分析 10.1 ２つの変数の関係 10.1.1 共分散 \\[\\sigma_{xy} = \\frac{1}{n}\\sum^{n}_{i=1}(x_i - \\bar{x})(y_i - \\bar{y})\\] 10.1.2 相関係数 \\[ \\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y} \\] 10.1.3 散布図 10.2 回帰分析 "],["multipleregression.html", "Chapter 11 単回帰分析 11.1 11.2 回帰分析", " Chapter 11 単回帰分析 11.1 11.1.1 共分散 \\[\\sigma_{xy} = \\frac{1}{n}\\sum^{n}_{i=1}(x_i - \\bar{x})(y_i - \\bar{y})\\] 11.1.2 相関係数 \\[ \\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y} \\] 11.1.3 散布図 11.2 回帰分析 "],["practiceanswer.html", "Chapter 12 練習問題解答 12.1 Ch.4 12.2 Ch. 6 12.3 Ch. 8", " Chapter 12 練習問題解答 12.1 Ch.4 練習問題 4.1.4 # 1 9179/67 ## [1] 137 # 2 (256*43+54)/8 ## [1] 1382.75 # 3 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 ## [1] 78 練習問題 4.2.3 # まずgoukeiに0を入れる goukei &lt;- 0 for(i in 1:50){ goukei &lt;- goukei + i } print(goukei) ## [1] 1275 練習問題 4.4.3 # 3から60まで3ずつ増える数列 v7_ex &lt;- seq(3,60,by=3) print(v7_ex) ## [1] 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 練習問題 @ref(#vectormake2) v9_ex &lt;- rep(seq(2,10,by=2), 5) # パイプを使って以下のように書くこともできる(パイプは第6章を参照) v9_ex &lt;- seq(2,10,by=2) |&gt; rep(5) 12.2 Ch. 6 練習問題 @ref{datamgtpractice} 武蔵大学経済学部の学生数データを使って、女性のみの合計学生数を学年別で計算せよ。data_634_long_1_2_gradeというオブジェクトに格納し、同様に結果を表示せよ。 ## 女性のみの学年ごとの学生数 data_634_long_female_grade &lt;- data_634_long |&gt; filter(性別==&quot;女&quot;) |&gt; group_by(学年) |&gt; summarise(学生数合計 = sum(学生数)) print(data_634_long_female_grade) ## # A tibble: 4 × 2 ## 学年 学生数合計 ## &lt;chr&gt; &lt;dbl&gt; ## 1 1年 136 ## 2 2年 132 ## 3 3年 141 ## 4 4年 114 同じデータを使って、１,２年生のみ合計学生数を男女別・学年別で計算せよ。 ## 女性のみの学年ごとの学生数 data_634_long_1_2_grade &lt;- data_634_long |&gt; filter(学年==&quot;1年&quot; | 学年 == &quot;2年&quot;) |&gt; #数字が半角か、などに気をつける group_by(性別, 学年) |&gt; ## ２つのカテゴリでグループ分け summarise(学生数合計 = sum(学生数)) print(data_634_long_1_2_grade) ## # A tibble: 4 × 3 ## # Groups: 性別 [2] ## 性別 学年 学生数合計 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 女 1年 136 ## 2 女 2年 132 ## 3 男 1年 355 ## 4 男 2年 350 12.3 Ch. 8 練習問題8.19.1：散布図 plot_scatter &lt;- ggplot(data=diamonds) + geom_point(aes(x=carat,y=price, color=color)) print(plot_scatter) 練習問題8.20：折れ線グラフ plot_line &lt;- ggplot(data=economics) + geom_line(aes(x=date,y=unemploy)) print(plot_line) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
