[["index.html", "武蔵大生のためのRによる実証分析入門 Chapter 1 この資料について", " 武蔵大生のためのRによる実証分析入門 Keita Abe 2024-04-24 Chapter 1 この資料について この武蔵大学経済学部でのRを用いた実証分析入門の資料です。 武蔵大学経済学部の学生の状況を背景に、最低限でなんとか実証分析を行うところまで学ぶことを意図した資料になっています。 Rの入門については、より詳しい以下の資料やウェブサイトが存在しますので、詳しい説明が知りたい学生はそちらを参照することをおすすめします。 わたしたちのR R言語入門 実証分析のベースとなる計量経済学についてはこれらの書籍がおすすめです。 計量経済学の第一歩 実証分析のススメ また、Rによる実証分析についても多くの書籍が出版されています。そちらも参照してください。 Rによるデータ分析入門 Rによる実証分析 第2版 Rによる計量政治学 "],["whatsr.html", "Chapter 2 Rとはなにか？ 2.1 R? 2.2 Excelじゃだめなのか 2.3 Rのよいところ 2.4 例えばRでできること：図表 2.5 例えばRでできること：ウェブアプリ 2.6 例えばRでできること：ウェブスクレイピング 2.7 地図の分析・活用 2.8 Rの欠点 2.9 CUIとGUI 2.10 プログラミング", " Chapter 2 Rとはなにか？ 2.1 R?  R は統計、データ分析、作図のためのインタープリタープログラミング言語 統計やデータ分析を行うアプリ 他にはSPSS, Stata Pythonもよく使われる 2.2 Excelじゃだめなのか Excel は表計算ソフトで多くの機能を有している Excelでできること 計算する 図を描く 基本的な統計分析 ではExcelではだめなのか？ Excelでも最低限のことはできますが、分析が複雑になっていくと手数も増えていきます。 特に、Excelだと同じことをもう一度やる（データを変えて同じ分析をする、など）がやりにくく、ミスも起きやすくなります。 本当に初歩の初歩ならエクセルで十分ですが、ある程度の実証分析をやろうと思うとRなどを学ぶほうが回り道のようで結局早い 2.3 Rのよいところ 無料 多くにプラットフォーム（MacOS, Windows, Linux)で使用可能 たくさんの資料がネット上に存在する 分析結果をプレゼンテーションするツールが充実している Rstudio: 統合開発環境(IDE) 豊富なパッケージ 多くのエンジニアや研究者が公開 2.4 例えばRでできること：図表 Rでは、柔軟に図表を描くことができます。例えば以下の図は、武蔵大学のウェブサイトに公開されている学生数のデータを描画したものです。少しやり方を学べば、以下のような図を簡単に作成することができます。 2.5 例えばRでできること：ウェブアプリ Rではインタラクティブなウェブアプリも作ることができます。以下の例は、数値をユーザーが変えることで結果のグラフが変化して表示される簡単なウェブアプリです。 例 2.6 例えばRでできること：ウェブスクレイピング 2.7 地図の分析・活用 2.8 Rの欠点 Rは進化が速い 処理が比較的遅い 一般的なデータ分析をするのには問題がない Excelよりは速い ビッグデータや複雑な統計モデルを走らせると、遅かったりメモリ消費が激しい CUIなので、最初の学習が難しい 2.9 CUIとGUI CUI: Character User Interface 命令を文字で行う（キーボードを使う）操作環境 GUI: Graphic User Interface マウスでクリックしながら使う操作環境 2.9.1 GUIの方が楽？ GUIの方が楽では？ マウスで操作ができる方がよさそう？ CUIは記録ができる 何度も同じ操作ができる 人が書いた一連の操作（コード）をコピー・参考にできる 柔軟性が高い Rを使う統合環境であるRStudioは、CUIながらGUI的に作業を行える部分もある環境を提供する。 2.10 プログラミング やることはプログラミング PythonもJavaも、まずはプログラミングを理解すると学べるようになる Rは比較的わかりやすい言語 ゼミでは基本的なデータ描画と統計分析をできるようになることが目標 "],["howtostart.html", "Chapter 3 Rのはじめかた 3.1 Rをどうやって使う？ 3.2 Rstudioを使う3つの方法 3.3 RとRstudioのインストール 3.4 Rstudioのインストール 3.5 Rstudioのインターフェース 3.6 コンピュータのディレクトリ構造 3.7 演習：作業フォルダを作ろう 3.8 作業スペース 3.9 プロジェクトの作成 3.10 演習: Rプロジェクトを作成してみよう 3.11 とりあえず触ってみる 3.12 スクリプトの作成 3.13 実行してみる 3.14 スクリプトを書く際の注意点 3.15 エラーを恐れるな！ 3.16 Rstudioの補完機能 3.17 Rstudioのオプション", " Chapter 3 Rのはじめかた 3.1 Rをどうやって使う？ Rを使うにはいくつか方法がある。 統合開発環境 IDE: Integrated Development Environment ソフトウェア開発や、データ分析のプロセスをワンストップで行える環境 一部GUIを導入したり、CUIによる操作をアシストする 特に強い好みがない限り、Rstudioをおすすめ R 単体でも使えるが、RstudioでRを使うほうが直感的で使いやすい。 3.2 Rstudioを使う3つの方法 PCにインストール 自分のPCにインストール ネット環境がなくても使える 自分のPCにファイルにアクセスして使える 学校のパソコンを使う 学校のパソコンにはRとRStudioがインストールされている 学校に自分のPCを持ってこなくてもよいが家で勉強できない Rプロジェクト[^1]を用いた際にネットワークドライブに置いた場合、ワーキングディレクトリの挙動がおかしいので、パソコンのパスなどに詳しくない人は混乱するかもしれない。 posit.Cloudの無料プランを使う クラウド上でRstudioを使う 利点：コンピューター上の設定が不要 欠点：データファイルなどを毎回アップロードする必要がある。ファイル数などは限られる。 [^1] 後述します。 3.3 RとRstudioのインストール 学校のパソコンにはすでにインストールされている 自分のパソコンに導入する人はこのスライドかここにある「RとRStudioのインストール方法の解説」を参照 3.3.1 Windownsへのインストール ブラウザからCLANへアクセスする 「Download R for Windows」-&gt; 「base」-&gt; 「Download R-4.3.3 for Windows」 R-4.3.3-win.exeがダウンロードされる (#fig:r_download_win-1)Rのダウンロード。Windowsの場合 (#fig:r_download_win-2)Rのダウンロード。Windowsの場合 (#fig:r_download_win-3)Rのダウンロード。Windowsの場合 R-4.3.3-win.exeをクリックしてインストールする 基本的に「はい」や「次へ」で良い 「起動時オプション」は「いいえ」（デフォルト状態） 「このアプリがデバイスに変更を加えることを許可しますか」と出たら「はい」 完了したらデスクトップやアプリ一覧にR.4.3.3があるかどうかチェック 3.3.2 Mac OSへのインストール まず自分のMacがIntelチップかApple Siliconかを確認する 左上のリンゴマーク→「このMacについて」 表示された情報の「チップ」が「Apple M1」やM2,M3であればApple silicon, IntelであればIntel ブラウザからCLANへアクセスする 「Download R for Mac OS」をクリック Apple Siliconの場合は、R-4.3.3-arm64.pkgをダウンロード Intelの場合は、R-4.3.3-x86_64.pkgをダウンロード (#fig:r_download_mac-1)Rのダウンロード。MacOSの場合 (#fig:r_download_mac-2)Rのダウンロード。MacOSの場合 ダウンロードしたpkgファイルをクリックしてインストールする 基本的には「次へ」「同意する」を押す インストール先：Macintosh HD 標準インストール 完了したら、アプリ一覧にRがあるかどうかチェック (#fig:r_download_mac_launchpad)MacのLaunchpad上に表示されているR 3.4 Rstudioのインストール Posit社のウェブサイトへアクセス “2. Install RStudio”の青いボタンをクリック (#fig:rstudio_install)RStudioのダウンロード。図はMacOSの場合 ダウンロードされたファイルをクリックしてインストールする。基本的に「次へ」でよい。 完了したら、アプリ一覧に丸いロゴでRと書いてあるRStudioがあるかチェック 3.5 Rstudioのインターフェース Figure 3.1: Rstudio見た目 3.6 コンピュータのディレクトリ構造 コンピュータでファイルなどを扱う上で、pathという概念を理解しておく必要がある。パソコンを使っているとフォルダをよく使う。自分が作ったファイルをフォルダに保存するなどである。これはCUIではディレクトリと呼ばれる。 コンピュータ上においては、ファイルの場所はpathで表現される。これはコンピュータ上の住所のようなものである。 j:というドライブの下のabezemiというフォルダの下にあるr_renshuというフォルダにあるkadai1.Rというファイルがあるとする。そのファイルのpathはj:/abezemi/r_renshu/kadai1.Rとなる。 コンピュータ上では、このように文字でファイルの場所と名前を指定することがよくある。 Figure 3.2: ディレクトリ構造 3.7 演習：作業フォルダを作ろう (Windows) ドライブ上で右クリック→新規作成→フォルダ (Mac) Finderの右上の◯に…のマークをクリック→新規フォルダ 自分のパソコン 例えば「ドキュメント」(Windows)や「書類」(Mac)の下にabezemiフォルダを作成 学校のパソコン 自分の学生番号のドライブ(例 s1234567)の下に abezemi フォルダを作成 Posit.cloudの場合は、 3.8 作業スペース コンピューター上では、どこかのディレクトリ（フォルダ）がRの作業場所になっている。 今の作業場所はgetwd()で表示できる。 getwd() これを変更するにはsetwd(path)で変更できる。 # Windowsの場合 # keitaを自分のユーザー名に変える setwd(&quot;C:/keita/Documents/abezemi&quot;) # Mac OSの場合 # keitaを自分のユーザー名に変える setwd(&quot;/Users/keita/Documents/abezemi&quot;) # 学校のPCの場合 setwd(&quot;j:/abezemi&quot;) ここではj:ドライブの下のabezemiフォルダに設定。 もう一度getwd()して変更されたか確認しよう。 3.9 プロジェクトの作成 作業場所を指定しても、ファイルの管理が面倒だったりする。 RStudioのRプロジェクトという機能を使うと、以下のメリットがある データやスクリプト（コード）へのアクセスが容易 Gitによるバージョン管理のベースにもなる 異なる環境でも同じ作業スペースが設定される 一つのプロジェクトについてひとまとまりのファイルとして管理できる 3.10 演習: Rプロジェクトを作成してみよう File -&gt; “New Project” -もしくは右上の “Project (none)” New Directoryでプロジェクトを作成 “New Project”を選択 プロジェクト名を入力: r_renshu プロジェクト名は英語で。日本語は使えない（もしくはトラブルの元になる） 2つ目の欄には、どのディレクトリの下にプロジェクトディレクトリを作るかを指定する。 今回はabezemiの下につくるので、Browseを開いてabezemiフォルダを指定する (#fig:project_make)Rプロジェクトの作成 プロジェクトが作成されると、作成したディレクトリにはプロジェクト名.Rprojという名前のファイルが作成される 今回はabezemiの下にr_renshuフォルダが作成され、r_renshu.Rprojというファイルができる プロジェクトの設定などを保存 3.11 とりあえず触ってみる Rとの”対話”は、Rstudioの左下のペイン(コンソール)で行われる。 コンソールに、1+1と打ってみる。 すると、2と表示される。 1 + 1 ## [1] 2 3.12 スクリプトの作成 そのままConsoleに入力していってもよいが、スクリプト(コード)に書くことで、記録を残しながらRに命令を与えることができる。 3.12.1 演習：スクリプトを作成してみる Rスクリプトを作成する 上のメニューのFile -&gt; New File -&gt; R script もしくは左上の区画のから、「R Script」 “Untitled1”というRスクリプトが作成されるので名前をつけて保存する File -&gt; Save As… -&gt; r_renshu.Rという名前をつけて保存 もしくは右上のフロッピーを押してr_renshu.Rという名前をつけて保存 3.13 実行してみる R scriptに以下のように書く print(&quot;Hello World!&quot;) ## [1] &quot;Hello World!&quot; カーソルが同じ行にあることを確認して、をクリック もしくは、[Ctrl]を押しながら[Enter] (MacならCommand+Enter) “Hello World!”と表示されれば成功。 3.13.1 コードを実行する際のポイント 実行したい範囲を選択してRunを押すと実行されるが、[Ctrl]を押しながら[Enter] (Macなら[Command]+[Enter])でも実行される。 また、範囲を選択しなくてもカーソルがあるところでRunか[Ctrl]+[Enter]を押すと、その行だけ（もしくはコードとして一つの命令になっている行数だけ）実行される。いちいち範囲選択しなくても良いので便利。 3.14 スクリプトを書く際の注意点 3.14.1 コメント R script上では#から始まる行は、コメントとして認識され、実行するとコンソールには表示されるが、何も起こらない。 メモなどを書く際に使う。 # これは初めてのRのコードです。 print(&quot;Hello World&quot;) ## [1] &quot;Hello World&quot; もしくは一度使ったが、今は実行したくないコードを一時的に無効にする。これはコメントアウトというプログラミングにおける基本的なテクニック。 # print(&quot;Good Evening&quot;) 3.14.2 スクリプトは読みやすく コメントや改行を活用して読みやすいコード（スクリプト）を書く。 Rのコードでは空行は意味をなさないのでいくらでも空けてよい。 良い例 # Rの練習１ # 2024年4月15日 # ライブラリ library(tidyverse) # コード本体 # はじめまして print(&quot;Hello World!&quot;) # 足し算 x &lt;- 1 + 1 # データを読み込む # このデータはXXでダウンロードした data &lt;- read_csv(&quot;data/data1.csv&quot;) 良くない例 library(tidyverse) print(&quot;Hello World!&quot;) x &lt;- 1 + 1 data &lt;- read_csv(&quot;data/data1.csv&quot;) 3.15 エラーを恐れるな！ 間違ったコマンドを入力すると赤字でエラーが出る。 怖がらなくてよい。間違ってると教えてくれてるだけ。 .(ドット)と,(コンマ)を間違えただけでもうまくいかないのがプログラミング。注意深く書こう。 # これは間違ったコード(tを忘れてる) prin(&quot;Hello World&quot;) ## Error in prin(&quot;Hello World&quot;): could not find function &quot;prin&quot; 3.15.1 よくあるエラー1 Error in read_csv(\"data/Countries.csv\") : could not find function \"read_csv\" XXXという関数が見つかりません、というエラー 考えられるケース library()で必要なパッケージを読み込めてない 関数のつづりが間違っている 3.15.2 よくあるエラー2 Error: 'data/Countris.csv' does not exist in current working directory XXX.csvというファイルが作業場所にありません。 考えられるケース - そもそもファイルがない（保存した場所を間違えた） - ファイルの指定場所が間違っている - つづりが間違っている 3.16 Rstudioの補完機能 オブジェクト内の要素や、ファイル名などを補完してくれる機能 3.17 Rstudioのオプション Rstudioを自分好みにカスタマイズすることが可能 [Tools]-&gt;[Global Options…] Rstudio全般 コーディング 外観 ターミナル キーボードショートカット 3.17.1 例：外観の変更 "],["letsuse.html", "Chapter 4 Rを使ってみる 4.1 計算機としてのR 4.2 プログラミング言語としてのR 4.3 データ型 4.4 ベクトル 4.5 リスト", " Chapter 4 Rを使ってみる 4.1 計算機としてのR 4.1.1 足し算 1 + 1 ## [1] 2 4.1.2 かけ算 掛け算はアスタリスク(*)を使う。 2 * 3 ## [1] 6 割り算はスラッシュ(/)を使う (2+7)/3 ## [1] 3 割り切れない場合はある程度まで桁が表示 10/3 ## [1] 3.333333 4.1.3 論理演算 論理演算は書いてあることが真か偽か？を評価する。 # 「10は5より大きい」という命題は正しい？ 10 &gt; 5 ## [1] TRUE # 「等しい」は=が2つ == &quot;musashi&quot; == &quot;musashi&quot; ## [1] TRUE &quot;musashi&quot; == &quot;634&quot; ## [1] FALSE 4.2 プログラミング言語としてのR 4.2.1 変数へのオブジェクトの代入 x や yという「入れ物」に数字を代入する。 x &lt;- 8 y &lt;- 3 z &lt;- x + y z ## [1] 11 4.2.2 プログラミング：繰り返し 同じような作業を繰り返させる。 以下のケースでは、\\(i\\)というオブジェクトに1から10までを順番に入れて、それぞれのターンにおいて\\(i+1\\)という数字をprint()という関数でコンソールに表示させている。つまり、同じ作業を10回中身を変えてやりたいときに、print(1+1), print(2+1)...というように、何度も同じ文を書く必要がない。 for(i in 1:10){ print(i+1) } ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 ## [1] 11 4.3 データ型 Rのオブジェクトにはいくつかの「型」がある。そのオブジェクトに格納されている要素がどういう性質を持つか？が定義される。これを、データ型と呼ぶ。 たとえば、数字なのか文字列なのか？で扱いが異なる。 # 実数 x &lt;- 634 mode(x) ## [1] &quot;numeric&quot; # 文字列 y &lt;- &quot;musashi&quot; mode(y) ## [1] &quot;character&quot; 4.3.1 データ型：注意点 我々の目には同じ634であっても、データ型が文字列として定義されていると、コンピューターは計算ができない。ただ6.3.4.と書かれている文字であって、数字ではないという認識がなされるからである。 # 数字だが文字列 z &lt;- &quot;634&quot; mode(z) ## [1] &quot;character&quot; z + 6 ## Error in z + 6: non-numeric argument to binary operator 4.3.2 データ型の変換 # データ型のチェック mode(z) ## [1] &quot;character&quot; # 実数かどうか？ is.numeric(z) ## [1] FALSE # データ型を実数に変換して再度zに代入 z &lt;- as.numeric(z) # 再度チェック is.numeric(z) ## [1] TRUE 4.4 ベクトル 順序のある要素の集まりをベクトルと呼ぶ。 c()関数で作成することができる。 v1 &lt;- c(1,2,3,4,5) print(v1) ## [1] 1 2 3 4 5 ベクトルは、文字や論理値など取ることができる。 v2 &lt;- c(&quot;musashi&quot;,&quot;nerima&quot;,&quot;ekoda&quot;) print(v2) ## [1] &quot;musashi&quot; &quot;nerima&quot; &quot;ekoda&quot; v3 &lt;- c(FALSE,TRUE,TRUE,FALSE) print(v3) ## [1] FALSE TRUE TRUE FALSE 4.4.1 ベクトルの型 異なるデータ型を同じベクトルに混ぜることはできない。 混ぜると、一定のルールに基づいてある型が他の型より優先される # 数値と論理値を混ぜると、数値になる。(FALSE-&gt;0, TRUE-&gt;1) v4 &lt;- c(FALSE,1,TRUE) print(v4) ## [1] 0 1 1 # 数値と論理値と文字列を混ぜると、全部文字列になる v5 &lt;- c(FALSE,1,&quot;musashi&quot;) print(v5) ## [1] &quot;FALSE&quot; &quot;1&quot; &quot;musashi&quot; 4.4.2 ベクトル：連続した数値 連続した数値を入力したい場合はコロン:を使う v6 &lt;- c(1:10) print(v6) ## [1] 1 2 3 4 5 6 7 8 9 10 nずつ増える数列を作りたい場合は、seq()関数を使う # 例：2から50まで２ずつ増える数列 v7 &lt;- seq(2,50,by=2) 4.4.3 練習問題 3から60まで3ずつ増える数列ベクトルを作りなさい – # 3から60まで3ずつ増える数列 v7_ex &lt;- seq(3,60,by=3) print(v7_ex) ## [1] 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 4.4.4 ベクトルを作る関数1 同じ数値がたくさんあるベクトルを作りたい場合はrep()関数を使う # 5が100個ならぶベクトル v8 &lt;- rep(5,100) print(v8) ## [1] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 ## [59] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 – 本当に100個出てるか？ ベクトルの要素の数を数える関数はlength length(v8) ## [1] 100 4.4.5 ベクトル要素の参照 ベクトルのn個目の要素を参照したいときは角カッコを使う[] # v7の3つ目の要素は6 v7[3] ## [1] 6 # v7の2,3,5つ目の要素 v7[c(2,3,5)] ## [1] 4 6 10 4.5 リスト 様々なベクトルやデータなどのオブジェクトをひとまとめにして扱うことができるのがリスト リストはlist()関数で作成する # aというオブジェクトに、文字列ベクトル、数値ベクトル、データが混ざって入っている。 # カンマ, の後に改行しているが、listのかっこが閉じるまではひとまとまりだと扱われる。 a &lt;- list( c(&quot;a&quot;, &quot;b&quot;, NA, &quot;d&quot;), num = c(3, 1.1, 5), data = head(mtcars, 1)) a ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; NA &quot;d&quot; ## ## $num ## [1] 3.0 1.1 5.0 ## ## $data ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 4.5.1 リストの参照 リストの参照も角カッコでできる # リストの参照 a[1] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; NA &quot;d&quot; a[2] ## $num ## [1] 3.0 1.1 5.0 4.5.2 リストの参照 リストの中身のみを取り出したい場合は、二重括角カッコを使う[[]] a[[3]] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.62 16.46 0 1 4 4 "],["packages.html", "Chapter 5 パッケージとは 5.1 パッケージについて 5.2 パッケージのインストール 5.3 よく使うパッケージのインストール 5.4 パッケージの使い方1 5.5 パッケージの使い方2", " Chapter 5 パッケージとは 5.1 パッケージについて Rはデフォルト(初期状態)でインストールされている関数がたくさんある。 ベクトルの長さを測るlength()や、散布図を描くplot()などは関数であり、もともとRをインストールした時点で入っている。 しかし、さらにRを拡張して機能を強化することができる。 それがパッケージのインストールである。 たとえばスマホにはもともと基本アプリが入っているが、さらにいろんなアプリをダウンロードしてインストールできることに似ている。 しかしパッケージは無料である。 5.2 パッケージのインストール パッケージのインストールをする方法は二つある。 install.packages()関数を使う方法 install.packages(&quot;ggplot2&quot;) Rstudioの右下の区画の[Packages]タブから、[Install]ボタンを押して、ダイアログに従ってインストール 5.3 よく使うパッケージのインストール tidyverseと呼ばれるパッケージをインストールしてみよう。 install.packages(&quot;tidyverse&quot;) 実はこのtidyverseはパッケージ群であり、複数のパッケージがインストールされる。 5.3.1 Tidyverseについて Tidyverseというパッケージ群はggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats, lubridateという複数のパッケージを含む たとえばggplot2は図を描くためのパッケージであり、plot()関数などとかぶる。実際に、ggplot2ではplot()と同じような図を出力することができる。Tidyverseシリーズは、データをより直感的に扱うための哲学に基づいて開発されており、Rオリジナルの関数ではないが、多くの人が使うパッケージ群となっておりRを学ぶならばほぼ必須といえる状態になりつつある。 5.4 パッケージの使い方1 パッケージの使い方は２通りある。 パッケージに入っている関数を使うためには、パッケージを読み込む ## library()でパッケージの読み込み library(tidyverse) 読み込んだ後は、パッケージに含まれている関数が普通に使える。 ## read_csvはtidyverseに入っているreadrというパッケージに含まれる data1 &lt;- read_csv(&quot;data/data1.csv&quot;) 5.5 パッケージの使い方2 読み込んでいないパッケージの関数を使おうとするとエラーが出る。 ## read_csvはtidyverseに入っているreadrというパッケージに含まれる data1 &lt;- read_csv(&quot;data/data1.csv&quot;) ## Error in read_csv(&quot;data/data1.csv&quot;): could not find function &quot;read_csv&quot; パッケージ名と関数名を::で繋ぐと、読み込んでいなくても使える。 data1 &lt;- readr::read_csv(&quot;data/data1.csv&quot;) これが２つ目のパッケージの使い方である。そのスクリプトであまり使わないが一回だけ使いたいケースや、一般的でないパッケージや関数なので何のパッケージに入っている関数なのかを明示したい際に使う。 "],["datahandling.html", "Chapter 6 データのハンドリング 6.1 データ 6.2 tidy data (整然データ) 6.3 データフレームを扱うテクニック：パイプ 6.4 tidyでないデータとtidyデータの変換 6.5 データの「大きさ」 6.6 列の名前一覧 6.7 変数の要約 6.8 変数の取り出し 6.9 変数の取り出しと計算 6.10 データフレームとtibble 6.11 データの操作 6.12 演習: データ操作 6.13 データの結合", " Chapter 6 データのハンドリング 6.1 データ Rはデータ分析（統計解析）を行うのが主な機能 それ以外も色々できるが… 6.1.1 データとは？ 構造化データと非構造化データ 構造化：定義済みの形式に整理されている（行列で定義できる） 非構造化：形式化が難しい（テキストデータ、音声データなど） 半構造化データ：ある程度の構造は持つが、データベースのような形式になっていないもの（例：xml, json) Rでは基本的に構造化データを扱う テキストデータなども扱えるが、授業では扱わない 6.1.2 データフレーム Rでは基本的にデータをデータフレームという形で扱う データフレームは行と列を持つ形式 6.1.3 行と列 行と列は方向が決まっている。横が行(row)、縦が列(column)である。 行と列の覚え方 6.1.4 きれいなデータ？ 人間の見やすいデータ形式(表)とコンピュータが処理しやすいデータ形式は異なる。 同じ情報をもつデータフレームであっても、形式が異なるものがあることを理解しよう。 冒頭で出た武蔵大学経済学部の学生数のデータを見てみよう。 6.1.5 データの読み込み データはデータファイルから読み込む ファイルがある場所のpathを指定する。 データファイルの形式はExcelや.csv, .dta, .rdsなど様々 形式によって使う関数が異なる。 例えば Excelなら、readxlパッケージのread_excel csvなら、readrパッケージのread_csv いずれもtidyverseパッケージ群に含まれている ここではCSV形式について説明するが、その他のファイル形式については私達のRの第8章を参照してほしい 6.1.6 演習: データの読み込み csvを読み込むにはread_csv()関数を使う。この関数はreadrパッケージ含まれており、tidyverseパッケージ群の一つである。 gapminder.csvというデータファイルをGoogle Classroomからダウンロードする。 data2 &lt;- read_csv(&quot;data/gapminder.csv&quot;) 先ほどと違い、readとcsvの間が.ではなく_になっている。 Error: path does not exist:’というエラーが出る場合は、ファイルの相対パスが間違っている可能性がある getwd()で自分がr_renshuフォルダにいることを確認する gapminder.csvがきちんとdataフォルダに入っていることを確認する 6.1.7 日本語のデータを読み込む際の注意点 日本語のファイルを読み込む時に、問題になる可能性があるのがエンコーディングである。 エンコーディングとは、データを一定の規則に従って目的の情報に変換することで、とくに文字を扱う上で、それぞれの文字に番号を割り当てる符号化を行っている。 最近ではよりグローバルなUnicodeが使われており、tidyverseのパッケージもunicodeあるUTF-8をデフォルトとして使用する。しかし、日本語のファイルの中にはShift-JISというエンコーディングで作成されているファイルもある。 例えば、以下のファイルをそのまま読み込んで見る。 product_cp932 = read_csv(&quot;data/Products_cp932.csv&quot;) product_cp932 ## # A tibble: 6 × 6 ## ...1 ProductID ProductName Price Category CreatedDate ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; ## 1 1 1 YKDJw 1122 &quot;\\x83w\\x83\\x8b\\x83X&amp;\\x83r\\x83\\x85\\x81[\\x83e\\x83B\\x81[&quot; 2005-08-30 ## 2 2 2 ftKQ7 1877 &quot;\\x83w\\x83\\x8b\\x83X&amp;\\x83r\\x83\\x85\\x81[\\x83e\\x83B\\x81[&quot; 2006-07-01 ## 3 3 3 l8lqm 3754 &quot;\\x89\\xc6\\x8b\\xef\\x81E\\x83C\\x83\\x93\\x83e\\x83\\x8a\\x83A\\x81E\\x89\\xc6\\x93d&quot; 2005-05-26 ## 4 4 4 8ntvc 8242 &quot;\\x89\\xd4\\x81E\\x83O\\x83\\x8a\\x81[\\x83\\x93&quot; 2005-09-06 ## 5 5 5 HhDBS 4461 &quot;\\x90H\\x95i&quot; 2010-12-28 ## 6 6 6 PKIs3 4963 &quot;\\x8eG\\x89\\xdd\\x81E\\x93\\xfa\\x97p\\x95i&quot; 2005-02-09 Categoryという変数が文字化けしてしまっているのがわかる。 ファイルのエンコーディングを調べることができる。 readrパッケージもに入っているguess_encodingを使うと、Shift-JISである可能性が高いことがわかる。 guess_encoding(&quot;data/Products_cp932.csv&quot;) ## # A tibble: 3 × 2 ## encoding confidence ## &lt;chr&gt; &lt;dbl&gt; ## 1 Shift_JIS 1 ## 2 windows-1252 0.31 ## 3 windows-1250 0.31 read_csvのオプションを使って、encodingを指定する。Shift-JISはCP932というエンコーディングになっている。 product_enc = read_csv(&quot;data/Products_cp932.csv&quot;, locale=locale(encoding=&quot;CP932&quot;)) product_enc ## # A tibble: 6 × 6 ## ...1 ProductID ProductName Price Category CreatedDate ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; ## 1 1 1 YKDJw 1122 ヘルス&amp;ビューティー 2005-08-30 ## 2 2 2 ftKQ7 1877 ヘルス&amp;ビューティー 2006-07-01 ## 3 3 3 l8lqm 3754 家具・インテリア・家電 2005-05-26 ## 4 4 4 8ntvc 8242 花・グリーン 2005-09-06 ## 5 5 5 HhDBS 4461 食品 2010-12-28 ## 6 6 6 PKIs3 4963 雑貨・日用品 2005-02-09 文字化けなく読み込めた。 6.1.8 readrのその他のオプション readrでは以下のオプションを引数に指定することで設定できる。 引数 デフォルトの値 意味 col_names TRUE 1行目を列名にするか na c(““,”NA”) 欠損値を表す文字列 comment “” コメント開始文字 skip 0 先頭何行を無視するか n_max Inf 何行目までを読み込むか trim_ws TRUE 前後の空白文字を無視するか 6.2 tidy data (整然データ) 武蔵大学経済学部の学生数データを見てみよう。 ## エクセルからデータを読み込み data_634 &lt;- readxl::read_excel(&quot;r_basics/data/musashi_keizai_students_2023.xlsx&quot;) knitr::kable(data_634) ## kableは見やすい表を出力する関数 学科 性別 4年 3年 2年 1年 経済学科 男 140 121 139 133 経済学科 女 38 46 50 38 経営学科 男 117 111 121 129 経営学科 女 52 62 53 62 金融学科 男 108 107 90 93 金融学科 女 24 33 29 36 このデータは、人間の目に見やすい形式になっている。学科・性別と学年がクロス表形式になっているため、何年生の何学科の男女が何人いるか見やすい表になっている。このような形のデータは横型(wide型)と呼ばれる。 同じデータを、異なる形式で表示したものが以下である。 print(as.data.frame(data_634_long)) ## 学科 性別 学年 学生数 ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 ## 11 経営学科 男 3年 111 ## 12 経営学科 男 4年 117 ## 13 経営学科 女 1年 62 ## 14 経営学科 女 2年 53 ## 15 経営学科 女 3年 62 ## 16 経営学科 女 4年 52 ## 17 金融学科 男 1年 93 ## 18 金融学科 男 2年 90 ## 19 金融学科 男 3年 107 ## 20 金融学科 男 4年 108 ## 21 金融学科 女 1年 36 ## 22 金融学科 女 2年 29 ## 23 金融学科 女 3年 33 ## 24 金融学科 女 4年 24 このデータでは「人数」という一つの変数のみの列があり、その他の属性もすべて縦の項目で表されている。これは、コンピューターによって処理しやすい形式であり、ベクトルの処理が得意なRでは縦長の形式が扱いやすい。 この縦長形式のデータをtidy data(整然データ)と呼ぶ tidy dataの定義 - 一つの列が一つの変数を表す - 一つの行が一つの観測を表す - 一つのテーブルが一つのデータセットだけを含む Rの中でもtidy dataでないデータが好ましい場合もある。しかし、tidy dataを基本にしておけば、そこから加工することは容易である。 6.3 データフレームを扱うテクニック：パイプ データフレームを操作する関数の共通点 - 第１引数がデータフレーム - 第２引数以降はそのデータフレームに対する操作 - 結果がデータフレームとして返される 6.3.1 パイプ パイプ(|&gt;)は「これまでの処理を次の第１引数として引き渡す」という機能を持つ。 パイプはかつて%&gt;%と書かれていて、tidyverse群の一つであるmagrittrパッケージの関数であった。新しい|&gt;という演算子はRにネイティブで入っているため、パッケージをロードしなくても使える。少し前のコードだと未だに%&gt;%と書いてあるかもしれないが基本的に同じ意味である（阿部はまだ癖で書いてしまう時がある）。 x1 &lt;- c(1,2,3,4,5) ## 以下の２つは同じことを行っている。 mean(x1) x1 |&gt; mean() ## |&gt; はパイプと呼ばれるもの 6.4 tidyでないデータとtidyデータの変換 学科 | 男| 経済学科 | 53 17 今から横型（wide型）のデータを縦長（long型）に変換する。上のようなデータを下のようなデータに変換したいとする。 学科 |性 人数 経済学科 |男  53 6.4.1 long型データへの変換 tidyrというパッケージのpivot_longerという関数はtidyでないデータ(wide型)をtidyなデータ(long型)に変換する。 data_634_long &lt;- data_634 |&gt; ## long型に変換。1年〜４年の列(cols)を学生数という列にvalues_toでまとめる。各行に何年生かnames_toで記録する。 pivot_longer(cols=c(&quot;1年&quot;,&quot;2年&quot;,&quot;3年&quot;,&quot;4年&quot;),names_to =&quot;学年&quot;,values_to = &quot;学生数&quot;) まずパイプ(|&gt;)でdata_634というwide型のデータを関数に引き渡す。 data_634_long &lt;- data_634 |&gt; ## long型に変換。1年〜４年の列(cols)を学生数という列にvalues_toでまとめる。各行に何年生かnames_toで記録する。 pivot_longer(cols=c(&quot;1年&quot;,&quot;2年&quot;,&quot;3年&quot;,&quot;4年&quot;),names_to =&quot;学年&quot;,values_to = &quot;学生数&quot;) pivot_longer() 関数の引数 - colsは、どの列(column)の変数を使うかを指定する。 - names_toは、新たに生成されるカテゴリ用の列の名前を指定する。 - values_toは、数値が入る列の名前を指定する。 data_634_long &lt;- data_634 |&gt; ## long型に変換。1年〜４年の列(cols)を学生数という列にvalues_toでまとめる。各行に何年生かnames_toで記録する。 pivot_longer(cols=c(&quot;1年&quot;,&quot;2年&quot;,&quot;3年&quot;,&quot;4年&quot;),names_to =&quot;学年&quot;,values_to = &quot;学生数&quot;) さらにパイプで結果を次に引き渡して、学科名の順番を指定している。 これらの変数は後で説明する。 data_634_long &lt;- data_634 |&gt; ## long型に変換。1年〜４年の列(cols)を学生数という列にvalues_toでまとめる。各行に何年生かnames_toで記録する。 pivot_longer(cols=c(&quot;1年&quot;,&quot;2年&quot;,&quot;3年&quot;,&quot;4年&quot;),names_to =&quot;学年&quot;,values_to = &quot;学生数&quot;) 6.4.2 データを見てみる 右上のEnvironmentペーンにdata_634_longというオブジェクトが生成される。 クリックしてみると、エクセルのような画面が現れる またView()という関数をつかっても、同じようにデータを見ることができる。 ## data_634_longを見るビューワーがRstudio上で開く View(data_634_long) 6.4.3 データを一部だけみたい場合 また、データの最初だけみたいときは、head(), また後ろだけ見たいときはtail()関数を使う。 デフォルトでは、6行だけ表示されるが、行数は引数nで調整できる。 ## data1の最初の10行がコンソールに表示される head(data_634_long, n=10) ## # A tibble: 10 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 6.5 データの「大きさ」 データの行数や列数を調べるときにはdim()関数を使う。 dim(data_634_long) ## [1] 24 4 24行、4列だとわかる。 RStudioではdata.frameオブジェクトは右上ペーンにも表示されている。 6.6 列の名前一覧 データの各変数名（列名）の一覧を見たい場合はnames()かcolnames() names(data_634_long) ## [1] &quot;学科&quot; &quot;性別&quot; &quot;学年&quot; &quot;学生数&quot; 6.7 変数の要約 含まれている変数の基本統計量を見たい場合はsummary()関数を使う。 summary(data_634_long) ## 学科 性別 学年 学生数 ## 経済学科:8 男:12 1年:6 Min. : 24.0 ## 経営学科:8 女:12 2年:6 1st Qu.: 44.0 ## 金融学科:8 3年:6 Median : 76.0 ## 4年:6 Mean : 80.5 ## 3rd Qu.:118.0 ## Max. :140.0 定性的なデータ（カテゴリ変数）は、入っているカテゴリとその数 もしcharacterと表示されていたら、単なる文字列と認識されている 定量的なデータは以下のような統計量が計算される。 Min. nth Qu. Median Mean Max. 最小 n分位 中央値 平均 最大 6.8 変数の取り出し データから変数を一つ取り出すときは$マークを使う。 ## データフレーム$変数 で変数の列をベクトルとして取り出す data_634_long$学年 ## [1] 1年 2年 3年 4年 1年 2年 3年 4年 1年 2年 3年 4年 1年 2年 3年 4年 1年 2年 3年 4年 1年 2年 3年 4年 ## Levels: 1年 2年 3年 4年 6.9 変数の取り出しと計算 ## 平均 mean()関数 mean(data_634_long$学生数) ## [1] 80.5 ## 中央値 median()関数 median(data_634_long$学生数) ## [1] 76 ## 分散 var()関数 var(data_634_long$学生数) ## [1] 1625.478 ## 合計 sum()関数 sum(data_634_long$学生数) ## [1] 1932 6.10 データフレームとtibble 6.11 データの操作 データを編集したいことはたくさん出てくる。 列の名前を変えたい データの特定の列だけ抽出したい データの特定の行だけ提出したい 例：男性だけのデータ データの順番を並び替えたい データの列を並び替えたい 新しい変数を作りたい データを集計したい 6.11.1 データの操作 tidyverseシリーズであるdplyrパッケージに入っている関数で操作することができる。 6.11.2 元のデータの見た目確認 print(data_634_long) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 ## # ℹ 14 more rows 6.11.3 列の名前を変えたい: rename() 列（変数）の名前を変更する data_634_long_eng &lt;- data_634_long |&gt; rename(department = 学科, grade = 学年, gender = 性別, stu_num = 学生数) print(data_634_long_eng) ## # A tibble: 24 × 4 ## department gender grade stu_num ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経済学科 男 2年 139 ## 3 経済学科 男 3年 121 ## 4 経済学科 男 4年 140 ## 5 経済学科 女 1年 38 ## 6 経済学科 女 2年 50 ## 7 経済学科 女 3年 46 ## 8 経済学科 女 4年 38 ## 9 経営学科 男 1年 129 ## 10 経営学科 男 2年 121 ## # ℹ 14 more rows 6.11.4 特定の列だけ抽出する: select() データのうち、学科と性別という変数だけ抽出したいとする data_634_long_select &lt;- data_634_long |&gt; select(学科, 性別) print(data_634_long_select) ## # A tibble: 24 × 2 ## 学科 性別 ## &lt;fct&gt; &lt;fct&gt; ## 1 経済学科 男 ## 2 経済学科 男 ## 3 経済学科 男 ## 4 経済学科 男 ## 5 経済学科 女 ## 6 経済学科 女 ## 7 経済学科 女 ## 8 経済学科 女 ## 9 経営学科 男 ## 10 経営学科 男 ## # ℹ 14 more rows 6.11.5 特定の列だけ抽出する: filter() データのうち、女性のデータだけを抽出したいとする data_634_long_filter &lt;- data_634_long |&gt; filter(性別 == &quot;女&quot;) print(data_634_long_filter) ## # A tibble: 12 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 女 1年 38 ## 2 経済学科 女 2年 50 ## 3 経済学科 女 3年 46 ## 4 経済学科 女 4年 38 ## 5 経営学科 女 1年 62 ## 6 経営学科 女 2年 53 ## 7 経営学科 女 3年 62 ## 8 経営学科 女 4年 52 ## 9 金融学科 女 1年 36 ## 10 金融学科 女 2年 29 ## 11 金融学科 女 3年 33 ## 12 金融学科 女 4年 24 6.11.6 データの順番を並び替える: arrange() データの順番を学年-&gt;性別の順番で並び替える data_634_long_arrange &lt;- data_634_long |&gt; arrange(学年, 性別) print(data_634_long_arrange) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 ## 2 経営学科 男 1年 129 ## 3 金融学科 男 1年 93 ## 4 経済学科 女 1年 38 ## 5 経営学科 女 1年 62 ## 6 金融学科 女 1年 36 ## 7 経済学科 男 2年 139 ## 8 経営学科 男 2年 121 ## 9 金融学科 男 2年 90 ## 10 経済学科 女 2年 50 ## # ℹ 14 more rows 6.11.7 データの順番を並び替える: arrange() デフォルトは昇順だが、desc()で降順で並び変えることもできる data_634_long_arrange2 &lt;- data_634_long |&gt; arrange(desc(学年), 性別) print(data_634_long_arrange2) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 4年 140 ## 2 経営学科 男 4年 117 ## 3 金融学科 男 4年 108 ## 4 経済学科 女 4年 38 ## 5 経営学科 女 4年 52 ## 6 金融学科 女 4年 24 ## 7 経済学科 男 3年 121 ## 8 経営学科 男 3年 111 ## 9 金融学科 男 3年 107 ## 10 経済学科 女 3年 46 ## # ℹ 14 more rows 6.11.8 データの列を並び替える: relocate() 学年の列を性別の前に持ってくる data_634_long_relocate &lt;- data_634_long |&gt; relocate(学年, .before=性別) print(data_634_long_relocate) ## # A tibble: 24 × 4 ## 学科 学年 性別 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 1年 男 133 ## 2 経済学科 2年 男 139 ## 3 経済学科 3年 男 121 ## 4 経済学科 4年 男 140 ## 5 経済学科 1年 女 38 ## 6 経済学科 2年 女 50 ## 7 経済学科 3年 女 46 ## 8 経済学科 4年 女 38 ## 9 経営学科 1年 男 129 ## 10 経営学科 2年 男 121 ## # ℹ 14 more rows 6.11.9 データの列を並び替える: relocate() 学年の列を学科の後に持ってくる data_634_long_relocate2 &lt;- data_634_long |&gt; relocate(学年, .after=学科) print(data_634_long_relocate2) ## # A tibble: 24 × 4 ## 学科 学年 性別 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 1年 男 133 ## 2 経済学科 2年 男 139 ## 3 経済学科 3年 男 121 ## 4 経済学科 4年 男 140 ## 5 経済学科 1年 女 38 ## 6 経済学科 2年 女 50 ## 7 経済学科 3年 女 46 ## 8 経済学科 4年 女 38 ## 9 経営学科 1年 男 129 ## 10 経営学科 2年 男 121 ## # ℹ 14 more rows 6.11.10 データの列を追加/編集する: mutate() 新しく、学生数を100で割った数値を作るとする data_634_long_mutate &lt;- data_634_long |&gt; mutate(学生数100 = 学生数/100) print(data_634_long_mutate) ## # A tibble: 24 × 5 ## 学科 性別 学年 学生数 学生数100 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 1.33 ## 2 経済学科 男 2年 139 1.39 ## 3 経済学科 男 3年 121 1.21 ## 4 経済学科 男 4年 140 1.4 ## 5 経済学科 女 1年 38 0.38 ## 6 経済学科 女 2年 50 0.5 ## 7 経済学科 女 3年 46 0.46 ## 8 経済学科 女 4年 38 0.38 ## 9 経営学科 男 1年 129 1.29 ## 10 経営学科 男 2年 121 1.21 ## # ℹ 14 more rows 6.11.11 データの列を追加/編集する: mutate() 存在する変数名にすると、新しく変数(列)を作らずに上書きする data_634_long_mutate2 &lt;- data_634_long |&gt; mutate(学生数 = 学生数/100) print(data_634_long_mutate2) ## # A tibble: 24 × 4 ## 学科 性別 学年 学生数 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 1.33 ## 2 経済学科 男 2年 1.39 ## 3 経済学科 男 3年 1.21 ## 4 経済学科 男 4年 1.4 ## 5 経済学科 女 1年 0.38 ## 6 経済学科 女 2年 0.5 ## 7 経済学科 女 3年 0.46 ## 8 経済学科 女 4年 0.38 ## 9 経営学科 男 1年 1.29 ## 10 経営学科 男 2年 1.21 ## # ℹ 14 more rows 6.11.12 データを集計する 任意を列を集計したり統計量を計算する。 data_634_long_summarise &lt;- data_634_long |&gt; summarise(学生数合計 = sum(学生数), 学生数平均 = mean(学生数)) print(data_634_long_summarise) ## # A tibble: 1 × 2 ## 学生数合計 学生数平均 ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1932 80.5 6.11.13 データ操作の応用：パイプによる引き渡し ある操作を行った結果をパイプで次の関数に引き渡す。 ## 女性の合計だけを知りたい data_634_long_female &lt;- data_634_long |&gt; filter(性別==&quot;女&quot;) |&gt; summarise(女性学生数合計 = sum(学生数)) print(data_634_long_female) ## # A tibble: 1 × 1 ## 女性学生数合計 ## &lt;dbl&gt; ## 1 523 6.11.14 データ操作の応用：グループごとの集計 グループごとに集計したい場合はgroup_byでグループ情報を与える ## 学科ごとに合計を計算 data_634_long_dept &lt;- data_634_long |&gt; group_by(学科) |&gt; summarise(学生数合計 = sum(学生数)) print(data_634_long_dept) ## # A tibble: 3 × 2 ## 学科 学生数合計 ## &lt;fct&gt; &lt;dbl&gt; ## 1 経済学科 705 ## 2 経営学科 707 ## 3 金融学科 520 6.12 演習: データ操作 武蔵大学経済学部の学生数データを使って、女性のみの合計学生数を学年別で計算せよ。結果をdata_634_long_female_gradeというオブジェクトに格納し、結果をコンソールに表示せよ。 同じデータを使って、１,２年生のみ合計学生数を男女別・学年別で計算せよ。 6.12.1 データ操作：練習問題 武蔵大学経済学部の学生数データを使って、女性のみの合計学生数を学年別で計算せよ。data_634_long_1_2_gradeというオブジェクトに格納し、同様に結果を表示せよ。 ## 女性のみの学年ごとの学生数 data_634_long_female_grade &lt;- data_634_long |&gt; filter(性別==&quot;女&quot;)|&gt; group_by(学年) |&gt; summarise(学生数合計 = sum(学生数)) print(data_634_long_female_grade) ## # A tibble: 4 × 2 ## 学年 学生数合計 ## &lt;fct&gt; &lt;dbl&gt; ## 1 1年 136 ## 2 2年 132 ## 3 3年 141 ## 4 4年 114 6.12.2 データ操作：練習問題 同じデータを使って、１,２年生のみ合計学生数を男女別・学年別で計算せよ。 ## 女性のみの学年ごとの学生数 data_634_long_1_2_grade &lt;- data_634_long |&gt; filter(学年==&quot;1年&quot; | 学年 == &quot;2年&quot;)|&gt; #数字が半角か、などに気をつける group_by(性別, 学年) |&gt; ## ２つのカテゴリでグループ分け summarise(学生数合計 = sum(学生数)) print(data_634_long_1_2_grade) ## # A tibble: 4 × 3 ## # Groups: 性別 [2] ## 性別 学年 学生数合計 ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 男 1年 355 ## 2 男 2年 350 ## 3 女 1年 136 ## 4 女 2年 132 6.13 データの結合 ２つのデータフレームを結合したい場合 縦に結合したい場合 横に結合したい場合 6.13.1 データの縦の結合 例えば人文学部のデータと結合したい ## エクセルからデータを読み込み data_634_jinbun &lt;- readxl::read_excel(&quot;r_basics/data/musashi_jinbun_students_2023.xlsx&quot;) knitr::kable(data_634_jinbun) ## kableは見やすい表を出力する関数 学科 性別 4年 3年 2年 1年 英語英米文化学科 男 53 73 65 51 英語英米文化学科 女 74 72 77 55 ヨーロッパ文化学科 男 43 47 37 68 ヨーロッパ文化学科 女 60 66 63 56 日本・東アジア文化学科 男 50 46 48 45 日本・東アジア文化学科 女 61 78 75 74 変数の順番などが同じことを確認した上で、bind_rows()を使う data_634_keizai_jinbun &lt;- bind_rows(data_634,data_634_jinbun) print(data_634_keizai_jinbun) ## # A tibble: 12 × 6 ## 学科 性別 `4年` `3年` `2年` `1年` ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 経済学科 男 140 121 139 133 ## 2 経済学科 女 38 46 50 38 ## 3 経営学科 男 117 111 121 129 ## 4 経営学科 女 52 62 53 62 ## 5 金融学科 男 108 107 90 93 ## 6 金融学科 女 24 33 29 36 ## 7 英語英米文化学科 男 53 73 65 51 ## 8 英語英米文化学科 女 74 72 77 55 ## 9 ヨーロッパ文化学科 男 43 47 37 68 ## 10 ヨーロッパ文化学科 女 60 66 63 56 ## 11 日本・東アジア文化学科 男 50 46 48 45 ## 12 日本・東アジア文化学科 女 61 78 75 74 6.13.2 データを横に統合 新しい変数を含んだデータを既存のデータに統合したい ## エクセルからデータを読み込み data_634_keizai_teiin &lt;- readxl::read_excel(&quot;r_basics/data/musashi_keizai_teiin_2023.xlsx&quot;) knitr::kable(data_634_keizai_teiin) ## kableは見やすい表を出力する関数 学科 定員 経済学科 580 経営学科 580 金融学科 440 6.13.3 データを横に統合：join()関数 ここではleft_joinを使う。学科という変数をキーとして、左側に存在するすべての行にデータを統合する。 ## 学科の人数と学科の定員を統合する data_634_long_keizai &lt;- data_634_long |&gt; left_join(data_634_keizai_teiin, by=c(&quot;学科&quot;=&quot;学科&quot;)) print(data_634_long_keizai) ## # A tibble: 24 × 5 ## 学科 性別 学年 学生数 定員 ## &lt;chr&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 経済学科 男 1年 133 580 ## 2 経済学科 男 2年 139 580 ## 3 経済学科 男 3年 121 580 ## 4 経済学科 男 4年 140 580 ## 5 経済学科 女 1年 38 580 ## 6 経済学科 女 2年 50 580 ## 7 経済学科 女 3年 46 580 ## 8 経済学科 女 4年 38 580 ## 9 経営学科 男 1年 129 580 ## 10 経営学科 男 2年 121 580 ## # ℹ 14 more rows 6.13.4 join関数一覧 上で使用したleft_join以外にもいくつかのjoin関数が用意されている。 関数名 説明 inner_join() どちらのデータフレームにも存在するキーの行のみ返す left_join() 左のデータフレームに存在するキーの行を返す right_join() 右のデータフレームにも存在するキーの行を返す full_join() いずれかのデータフレームに存在するキーの行を返す "],["rstats.html", "Chapter 7 統計のおさらい 7.1 データとは？ 7.2 統計量とはなにか", " Chapter 7 統計のおさらい 7.1 データとは？ 7.2 統計量とはなにか 7.2.1 統計量 データの特徴を一つの数値に縮約したものが統計量。これは、データという数値の集まりを理解し情報を取り出すために有用である。 7.2.2 平均 \\[ \\bar{x} = \\frac{1}{n}(x_1 + \\cdots + x_n) \\] \\[ \\bar{x} = \\frac{1}{n}\\sum^{n}_{i=1}x_i \\] 7.2.3 分散 \\[ \\sigma^2 = \\frac{1}{n}\\{( x_1 - \\bar{x})^2 + \\cdots + ( x_n - \\bar{x})^2\\} \\] \\[ \\sigma^2 = \\frac{1}{n}\\sum^{n}_{i=1}( x_i - \\bar{x})^2 \\] 7.2.4 もう一つの分散 \\[ s^2 = \\frac{1}{n-1}\\sum^{n}_{i=1}( x_i - \\bar{x})^2 \\] 7.2.5 母集団と標本 母集団 母数？ サンプルサイズ サンプル数？ 7.2.6 サンプリング 無作為抽出 (ランダムサンプリング) 多段抽出法 層化抽出法 7.2.7 共分散 \\[\\sigma_{xy} = \\frac{1}{n}\\sum^{n}_{i=1}(x_i - \\bar{x})(y_i - \\bar{y})\\] 7.2.8 相関係数 \\[ \\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y} \\] "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
